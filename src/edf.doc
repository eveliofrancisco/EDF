c   _ ________   ____
c  | |___|___  \| ___|
c  | |__ | | \  | |__     
c  |  __|| |  | |  __|
c  | |___|_|_/  | |
c  |_|___|_____/|_|
c
c-----------------------------------------------------------------------
c
      program edf
c
c.......................................................................
c
c  EEEEEEEEEEEEEEE  DDDDDDDDDDD        FFFFFFFFFFFFFFF        333333     
c  EEEEEEEEEEEEEEE  DDDDDDDDDDDDD      FFFFFFFFFFFFFFF      333    333
c  EEE              DDD       DDDD     FFF                 3         33
c  EEE              DDD          DDD   FFF                           333 
c  EEE              DDD          DDD   FFF                           33
c  EEEEEEEEEEEEEE   DDD          DDD   FFFFFFFFFFFFFF              333
c  EEEEEEEEEEEEEE   DDD          DDD   FFFFFFFFFFFFFF              333
c  EEE              DDD          DDD   FFF                           33
c  EEE              DDD          DDD   FFF                           333
c  EEE              DDD       DDDD     FFF                 3         33
c  EEEEEEEEEEEEEEE  DDDDDDDDDDDDD      FFF            PPP   333    333            
c  EEEEEEEEEEEEEEE  DDDDDDDDDDD        FFF            PPP     333333   
c
c.......................................................................
c 
c     SECOND VERSION OF THE 'edf' PROGRAM. 
c
c     The following tasks are carried out:
c
c     1) Read the wavefunction and the atomic overlap matrix (AOM) 
c     2) Compute the electron number distribution function (EDF)
c        using the fragments defined in the input file.
c     3) Localize the input natural orbitals using the Cioslowski 
c        isopycnic localization method.
c     4) Compute the EDF from the wave function expanded in terms
c        of the isopycnic MOs. If all works properly, it should be 
c        exactly the same than that obtained in 2)
c     5) Compute an approximate EDF assuming that all the localized 
c        orbitals are orthogonal within all the defined fragments. This 
c        is exact when there are only two fragments and the localized 
c        orbitals are those resulting from the diagonalization of the 
c        overlap matrix (within one of the two fragments) between the 
c        molecular orbitals corresponding to a single-determinant wave 
c        function.
c
c        Tasks 3,4, and 5 are optional.
c
c.....EDF reads the aimpac .WFN file written by the GAMESS or GAUSSIAN 
c     packages, reads (or computes) the overlap integrals between the 
c     molecular orbitals (MOs) within all the basins, and obtains the 
c     probabilities of having exactly an integer number of electrons
c     n_1 in fragment 1, n_2 electrons in  fragment 2, ..., and n_m 
c     electrons in fragment 'm' of the molecule. The sum of the 'm' 
c     fragments must be necessarily equal to the whole molecule, and 
c     each atom can only be ascribed to a single fragment.
c
c.....Three categories of basins can be used in EDF:
c
c     1) The atomic basins of the Quantum Theory of Atoms in Molecules
c        (QTAIM) or atomic QTAIM basins.
c     2) The basins of the Electron Localization Function (ELF) or
c        ELF basins.
c     3) The basins (computed within the program itself) corresponding
c        to a partition of the molecule into fuzzy atomic basins. There
c        are three of such fuzzy atomic partitions included in the EDF 
c        code which are based on Mulliken, Lowdin, and MinDef atoms, 
c        respectively. Mulliken and Lowdin atoms are well-known and do
c        not deserve further comments. 'MinDef' atoms correspond to the
c        Minimally Deformed Atoms in Molecules defined by J. Fernandez 
c        rico et. al.. See for instance, 
c
c           a) "Analysis of the molecular density" 
c               Fernández Rico, J.; López, R.; Ramírez, G. 
c               J Chem Phys  1999, 110, 4213-4220.
c
c           b) "Analysis of the molecular density: STO densities2
c               Fernández Rico, J.; López, R.; Ema, I.; Ramírez, G.  
c               J Chem Phys 2002, 117, 533-540. 
c
c.....The overlap integrals within the atomic QTAIM basins are read in
c     by EDF with three different formats, corresponding to three 
c     different computational codes: PROMOLDEN, PROAIM, and TOPMOD.
c
c.....The overlap integrals within the ELF basins are read in exclusi-
c     vely with the format of TOPMOD code.
c
c
c.....Input (standard unit).............................................
c     (CAPITAL lettters are fixed names in the input)
c
c=====Record 1: ioverlap
c
c     ioverlap = 0  ==> The file with the overlaps between MOs comes from
c                       the PROMOLDEN program, or filedat in the next 
c                       record is 'mulliken', 'lowdin','mindef', 'mindefrho',
c                       netrho, promrho, heselmann, or becke.
c     ioverlap = 1  ==> The file with the overlaps between MOs comes from 
c                       the PROAIM program.
c     ioverlap = 2  ==> The file with the overlaps between MOs comes from
c                       the TOPMOD program with ELF basins.
c     ioverlap = 3  ==> The file with the overlaps between MOs comes from
c                       the TOPMOD program with QTAIM basins.
c     ioverlap = 4  ==> The file with the overlaps between MOs comes from
c                       the AIMALL program with QTAIM basins.
c     ioverlap = -1 ==> Complex Atomic Overlap Matrix (See 'edfx.f' file
c                       for information about the input in this case)
c
c=====Record 2: filedat  
c
c        Name of the file containing the atomic overlap matrix (AOM) 
c        between canonical MOs.
c
c        Instead of an existing 'filedat' file, the following keywords
c        are also valid in record 2.
c
c        filedat = 'mulliken' ---> The AOM is computed using a space 
c                   partitioning according to the Mulliken population 
c                   analysis method.
c        
c
c        filedat = 'lowdin' ---> The AOM is computed using a space 
c                   partitioning according to the Lowdin population 
c                   analysis method.
c
c        filedat = 'mindef' ---> The AOM is computed using a space 
c                   partitioning according to the minimally deformed 
c                   (mindef) atoms defined by Fernadez Rico et at.
c
c        filedat = 'mindefrho' ---> Same as above but with weights
c                   'w_A=rho_A/rho', that always give S_ii^A > 0 values.
c
c                   In this case, three integers can be given after 
c                   the MINDEFRHO keyword: NANG, NRAD and IRMESH,
c                   that represent the number of angular (NANG) and 
c                   radial (NRAD)  points in the integration, and the
c                   radial mapping (IRMESH).
c
c        filedat = 'netrho' ---> Same as above but with weights
c                   'w_A=rho_A/rho' determined with the so-called net
c                   densities, which elliminate all mixed (i.e. primitives
c                   in two different centers) densities when the w_A are
c                   computed.
c
c                   In this case, three integers can be given after 
c                   the MINDEFRHO keyword: NANG, NRAD and IRMESH,
c                   that represent the number of angular (NANG) and 
c                   radial (NRAD)  points in the integration, and the
c                   radial mapping (IRMESH).
c
c        filedat = 'promrho' ---> Same as above with 'w_A=rho_A/rho',
c                   being each 'rho_A' the IN VACUO atomic density 
c                   of the atom computed with the seven term analytical
c                   expression derived by fitting the Koga STO 
c                   atomic densities with the AUXPI code.
c
c        filedat = 'heselmann' ---> Identifies that the weights used
c                  in a chemical localization are those defined by
c                  Andreas Heselmann, JCTC 12, 2720-2741 (2016).
c
c        filedat = 'becke' ---> The AOM is computed using Becke's recipe
c
c                   In this case, four integers can be given
c                   after the MINDEFRHO keyword: NANG, NRAD, IRMESH, and 
c                   POW, that represent the number of angular (NANG) and 
c                   radial (NRAD)  points in the integration, the radial 
c                   mapping (IRMESH), and the iterative K parameter of
c                   Becke's method (POW).
c
c
c        In these five cases, ioverlap = 0 in Record 1 is required.
c
c=====Record 3: wfnfile
c
c        Name of the .WFN file containing the definition of the wave
c        function. In the case of a CASSCF calculation this includes 
c        the determinant coefficients and the occupation numbers of 
c        their molecular spin-orbitals. Files of this type are presently
c        available for .WFN files coming from a domestic version of the 
c        GAMESS10 code. It is clear that the overlap integrals read 
c        in from 'filedat' must correspond to the wave function given 
c        in 'wfnfile'
c
c-----After record 3 the following input lines are allowed.
c     (records 4 and 5.i are mandatory and must be consecutive)
c
c=====Record 4: NGROUP ngroup 
c
c        The number domains in which the molecule is divided.
c
c        If ngroup is less than or equal to 0, or an integer is not given
c        after the NGROUP keyword, each basin is taken as an independent 
c        domain with a minimum (maximum) electronic population equal to 0 
c        (N_A) for ALPHA electrons and 0 (N_B) for BETA electrons, where 
c        N_A and N_B are the total number of ALPHA and BETA electrons in 
c        the molecule. In this case Record 5.i must be skipped.
c
c        The same applies if the 'NGROUP' keyword is not present in the 
c        input file.
c
c        If 'ngroup' is given a negative value the 'i' variable in the
c        following record runs for 1...NGROUP-1, and last group is 
c        intended to be formed by all those atoms not included in the
c        first NGROUP-1 groups.
c
c=====Record 5.i (i=1,NGROUP)
c
c         Record 5.i may have two different formats, (1) and (2). 
c
c         Format (1) is:
c
c    (1)  nfugrp(i), [ifugrp(j,i),j=1,nfugrp(i)], 
c              minelecA, maxelecA, minelecB, maxelecB
c
c         where
c
c         nfugrp(i)     = Number of atoms in group i.
c         ifugrp(j,i)   = Indices of atoms that belong to group i.
c         minelecA      = Minimum number of ALPHA electrons in group i.
c         maxelecA      = Maximum number of ALPHA electrons in group i.
c         minelecB      = Minimum number of BETA  electrons in group i.
c         maxelecB      = Maximum number of BETA  electrons in group i.
c
c         Format (2) is:
c
c    (2)  nfugrp(i),[ifugrp(j,i),j=1,nfugrp(i)]
c
c         In this case, EDF associates to group i the values
c
c         minelecA = 0   maxelecA = NALPHA
c         minelecB = 0   maxelecB = NBETA
c
c         where NALPHA and NBETA are the total number of ALPHA and BETA
c         electrons of the molecule, as computed in the rdwfn.f routine.
c
c         In both cases, minelecA, maxelecA, minelecB, maxelecB MUST 
c         INCLUDE the CORE electrons, possibly defined in the COREMO
c         order below, i.e. minelecA, maxelecA, minelecB, maxelecB DO 
c         NOT refer exclusively to valence electrons (not equal to the 
c         total number of electrons when mocore # 0), but to total 
c         electrons. EDF assumes that each core MO accounts of one ALPHA 
c         electron and one BETA electron.
c
c=====Record 6: AOMNORM atom
c
c         When the keyword AOMNORM is read in, the program modifies
c         the elements of the atomic overlap matrix corresponding
c         to the center 'atom' such that SUM (i=1,ncent) aom(i,m,j) 
c         will be exactly 0.0 for m.ne.j or 1.0 for m.eq.j. If 'atom'
c         is not read in the program takes 'atom'=last atom of the 
c         input .WFN file.
c
c
c=====Record 7: EPSDET real-number 
c
c        The real-number has the following meaning: A product Ci * Cj
c        of a pair of determinants i and j in a CASSCF calculation is 
c        neglected when abs(Ci*Cj) < real-number. Default is 0.0.
c
c=====Record 8: EPSPROBA real-number 
c
c        The real-number has the following meaning: The computation 
c        of any probability for BETA electrons is avoided if the 
c        highest probability for ALPHA electrons is smaller than
c        this 'real-number'
c
c=====Record 9: PROBCUT real-number  
c
c        In the output of probabilities, only those probabilities 
c        greater than PROBCUT are written. Default is 0.0
c
c=====Record 10: TOLAOM real-number  
c
c        If the sum over all the centers of an atomic overlap matrix
c        element, SUM_n AOM(n,i,j), differs from delta_ij by more than
c        the 'real-number' the program stops since this means that
c        the AOM has not been appropriately computed. The default value
c        of real-number is 0.01.
c
c=====Record 11: NDETS ndets  
c 
c        In a CASSCF calculations only the first ndets determinants in 
c        the wavefunction are used (the wavefunction is renormalized).
c        If this record is not given EDF uses all the determinants of
c        the wave function.
c
c=====Record 12: EPSWFN epswfn
c
c        This is another order, related to the previous one, that can be
c        used to control the number of determinants of the input .WFN 
c        file that is actually used to expand the wavefunction. All the 
c        determinants whose (absolute value of the) coefficient in the 
c        wavefunction is lesser than 'epswfn' are neglected. After this, 
c        the wave function is renormalized. The default value is 0.0.
c
c=====Record 13: EPSWFNLOC epswfnloc
c
c        Equivalent to the above order but with the WFN expanded in
c        terms of (isopycnic) localized MOs. This order is relevant 
c        only if the FULLOC order is active (see below).
c
c=====Record 14: LARGE
c
c        Large output is requested. The default is short output.
c
c=====Record 15: RECUR
c
c        By default, when the number of groups is 2, the recurrence
c        relations of Cançes et al are not used. With this order, 
c        such recurrences are employed even in the case of MD wfns.
c
c
c=====Record 16: FULLOC [ ALLCENTER ]
c
c        Localize the input natural orbitals. By default the isopycnic
c        localization is not carried out. If the 'allcenter' keyword is
c        not given the localization is carried out using the groups
c        defined in the input to contruct the localization function 
c        which is maximized. On the contrary, if 'allcenter' keyword is
c        is given the localization function is built using every center 
c        as an individual fragment.
c
c=====Record 17: NOPROB
c
c        If this keyword is given the exact EDF using the wavefunction 
c        defined in the input .WFN file is not computed. The defaut is 
c        to compute it.
c
c=====Record 18: PROBLOC
c
c        If this keyword is given, the EDF using the wavefunction
c        expressed in terms of the Localized MOs is computed. By default
c        this EDF is not computed. Clearly, this keyword is relevant only
c        in case that a previous localization of the input natural MOs 
c        has been performed. Since isopycnic localized MOs are normalized
c        but not orthogonal, the sum of all probabilities of the EDF in 
c        this case is not, in general, equal to 1.0.
c
c=====Record 19: NOPROBX
c
c        If this keyword is given, the approximate EDF using the wave-
c        function expressed in terms of the Localized MOs is not computed.
c        The defaut is to compute it. This keyword is relevant only
c        in case that a previous localization of the input natural MOs 
c        has been performed. The approximation in computing the EDF 
c        consists in assuming that all the localized MOs are orthogonal 
c        within the different fragments in which the molecule has been 
c        divided.
c
c=====Record 20: COREMO overlap-canonical
c
c        This keyword indicates that any molecular orbital of the input
c        wavefunction with a self-overlap in any of the fragments greater
c        than 'overlap-canonical' is considered as a fully-localized 
c        (i.e. core) orbital in that fragment. Consequently, it is 
c        excluded from the computation of the EDF. If the keyword 
c        COREMO is given but the 'overlap-canonical' value is not read,
c        the program assumes overlap-canonical = 0.99.
c
c=====Record 21: NOORDER
c        This keyword indicates that spinless probabilities are not 
c        ordered by decreasing value in the output file. By default, 
c        they are ordered provided that its number is smaller that the
c        NSTACK parameter, currently set to 4000.
c
c=====Record 22: DELETE n_1 n_2 n_3 ...
c        Let us assume that a multideterminantal wavefunction with NCORE
c        MOs has been read in. With this order, provided n_i <= NOCORE, 
c        the ith MO is elliminated from the wavefunction. After this
c        order, the actual number of molecular orbitals and CORE orbitals
c        (both ALPHA and BETA) are decreased by the number of valid n_i's 
c        which are read in this order.
c
c=====Record 23: SUPPRESS { AOM | WFN } n_1 n_2 n_3 ...
c        Suppress from the AOM file the MOs n_1, n_2, n_3,..., writing
c        a new AOM file with the AOM integrals between the non-deleted
c        MOs. When the keyword WFN is read in instead of the 'AOM'
c        keyword, the MOs n_1, n_2, n_3 are suppressed from the WFN
c        file, writing a new WFN file with the rest of MOs. The 'WFN'
c        keyword should only be used with single-Det wavefunctions.
c
c=====Record 23: LOCORE
c        Localize the CORE MOs from a multideterminantal wave function,
c        and replaces the canonical MOs of the wavefunction by these 
c        localized MOs. From this point on the original MOs are lost.
c
c=====Record 24: LOCSOME n1,n2, ...
c        Performs an isopycnic localization on the subset of canonical
c        MOs given by n1,n2, .... These can be typically CORE orbitals
c        in a multideterminantal wavefunction. After the localization
c        the AOM is appropriately modified.
c
c=====Record 25: NOMEM
c        For closed-shell systems and multiDet WFNs the ALPHA and BETA 
c        probabilities are saved in arrays instead of being stored in 
c        temporary files. This is the default (memedf=.true.) and in 
c        this case the routine 'mcalcedf.f' instead of 'calcedf.f' is 
c        used. This keyword is used to change this option (i.e. to 
c        set memedf=.false.)
c
c=====Record 26: PRSRS N_1 N_2 ... N_G
c        Compute the probability of the real space resonance structure
c        (PRSRS) in which N_1 electrons are in group 1, N_2 electrons in
c        group 2, ..., and N_G electrons in the last group. It is 
c        possible to put as many lines as this one in the input file.
c
c=====Record 27: MAXPOP maxgroup_1 maxgroup_2  ...
c
c        Define the maximum number of ALPHA or BETA electrons in each
c        group when the PRSRS oder is applied. Only the spin-resolved
c        resonance structures for which the number of ALPHA or BETA 
c        electrons in group "i" is smaller than or equal to maxgroup_i 
c        are considered. This order must be given after the PRSRS order.
c
c=====Record 28: MINPOP mingroup_1 mingroup_2  ...
c
c        Define the minimum number of ALPHA or BETA electrons in each
c        group when the PRSRS oder is applied. Only the spin-resolved
c        resonance structures for which the number of ALPHA or BETA 
c        electrons in group "i" is greater than or equal to mingroup_i 
c        are considered. This order must be given after the PRSRS order.
c
c=====Record 29: RANDOM minrandom maxrandom
c
c        Define the mininum (minrandom) and maximum (maxrandom) values
c        of a real*8 random number to be used in solving the linear
c        system of equations to obtain the EDF probabilities in the
c        binedf.f routine.
c
c=====Record xx: BONDING
c=====Record xx: CGEDF
c=====Record xx: RHOCOND
c=====Record xx: ALLRHOC
c=====Record xx: RHOALLS
c=====Record xx: NINDEP ngroup
c=====Record xx: MAXWFN
c
c=====Record 28: TWOCENDI [ epsbond ]
c
c        Activates the computation of all the two-center delocalization
c        indices. 'epsbond' is a threshold value such that atoms A and B
c        are considered to be bonded i DI_AB > epsbond. The default va-
c        lue of epsbond is 1D0. This order can only be used with Single
c        Determinant Wavefunctions (SDW). Ten calculations are perfor-
c        med usig epsbond, epsbond/2, ..., epsbond/2**9.
c
c=====Record 29: KPOWER pow
c
c        K power of the iterative Becke integration scheme. Default
c        is pow=3.
c
c=====Record 30: LEBEDEV nang
c
c        Number of angular points in Lebedev integrations. Default is
c        nang=434
c
c=====Record 31: NRAD nrad
c
c        Number of radial points in Becke integration. Default is 
c        nrad=150
c
c=====Record 32: IRMESH irmesh
c
c        Mapping of the r coordinate in Becke integration. 
c        Default is irmesh=1
c
c=====Record 33: RHOPOW rhopow
c
c        Power of each rho_A when computing w_A as 
c        w_A=rho_A^rhopow/SUM(rho_A^rhopow) in the PROMRHO partition.
c
c=====Record 34: CANLOC [ ALLCENTER ]
c
c        Localize the input canonical orbitals. By default the isopycnic
c        localization is not carried out. If the 'allcenter' keyword is
c        not given the localization is carried out using the groups
c        defined in the input to contruct the localization function 
c        which is maximized. On the contrary, if 'allcenter' keyword is
c        is given the localization function is built using every center 
c        as an individual fragment.
c
c=====Record 35: CHEMLOC
c
c        Idem as the above one but using the so-called chemical loc.
c
c=====Record 36: AOMLOC
c
c        Idem as the above one but using another variant of the 
c        chemical localization.
c
c=====Record 37: DAFHLOC
c
c        Idem as the above one but using the diagonalization of the
c        DAFH instead of the AOM.
c
c=====Record 38: DAFHSELECT n n_1 n_2 ... n_n
c
c        When this record is read in, the search of localized nc-2e MOs
c        is not carried out for all the n-tuples with a nivel 'n' but
c        only for the n-tuple of atoms indicated by 'n_1 n_2 ... n_n'. 
c        There can be in the input file as many 'DAFHSELECT' orders as 
c        desired. If there are no DAFHSELECT orders with a given value 
c        of 'n', then ALL n-tuples of atoms with 'n' atoms are explored. 
c        On the other hand, if a given value of 'n' is skipped in the order 
c        'MXCENT' (see below), then all DAFHSELECT orders with this value
c        of 'n' are irrelevant. Let us consider an example. Assume a
c        molecule with 5 atoms, and consider that the following lines
c        are present in the input file:
c
c        DAFHSELECT 3 1 2 3
c        DAFHSELECT 3 1 3 5
c        DAFHSELECT 4 1 2 3 4
c
c        Then, following nc-2e searches for localized MOs are performed:
c
c        All 1c-2e searches
c        All 2c-2e searches
c            3c-2e searches for the 3-tuples '1 2 3' and '1 3 5'
c            4c-2e searches for the 4-tuples '1 2 3 4' 
c        ALl 5c-2e
c        ALl 6c-2e
c           "
c           "
c        The above list goes up to a value of 'n' equal to 'mxcent' 
c        (see the MXCENT order below) and the values of 'n' equal to 
c        'n1', 'n2', ..., in this order are skipped.
c
c        At this moment, this restricted sears works only in the search
c        of localized nc-2e MOs for Single-Det WFNs.
c
c=====Recors 39: DODAFH
c                 :
c                 :
c                 :
c                END
c
c        The aim of this order is similar to that of the DAFHLOC. The 
c        difference is that DODAFH has a full control of the DAFH 
c        localizations actually performed. Within the DODAFH ... END
c        environment one puts as many orders like this one:
c
c        ncen cutoff (icen(j),j=1,ncen) [DEPLET]
c
c        where 'ncen'   ---> Indicates a localization of NCEN centers
c              'cutoff' ---> The value (close to but smaller than 1.0)
c                            to discriminate whether a found MO is 
c                            localized or not.
c              'icen()' ---> The indices of the NCEN atoms.
c              DEPLET   ---> means that the full DAFH is depleted after
c                            the last tried localization.  
c
c        The following is an example for the C_2H_6 molecule
c
c        dodafh
c          1 0.95 1
c          1 0.95 2   deplet
c          2 0.95 1 2 deplet
c          2 0.95 1 5
c          2 0.95 1 6
c          2 0.95 1 7 deplet
c          2 0.95 2 3
c          2 0.95 2 4
c          2 0.95 2 8 deplet
c        end
c
c
c=====Record 40: CRITICS critics
c
c        When CANLOC or CHEMLOC is invoked, the routine determines the set
c        of localized MOs that are partially localized in each atom or 
c        group. A MO fulfils this condition is S_ii^A > critics. The
c        default value is critics=0.02
c
c======Recors 41: COVX covx
c
c     If the distance between two atoms A and B is smaller than
c     (RA+RB)*COVX, a bond is assumed to exist between A and B.
c     RA and RB are the covalent radius stored in the array covrad()
c     of the 'connect.f' routine. The default value is 1.2.
c
c
c======Recors 42: DAMPS damps
c     
c     This order is relevant only for the 'CHEMLOC' localization.
c     In every cycle of localization the value of each CRITOV(1..mxcent)
c     is multiplied by DAMPS (a number that should be smaller than 1.0) 
c     with the aim of reducing the localization requirement. 
c     The default value is 0.95
c
c
c======Record 43: MXCENT mxcent [ n1 n2 ... ]
c
c     In the progressive localization of MOs based on the diagonalization
c     of the DAFH in 1-, 2-, 3-,... centers, 'mxcent' defines the maximum
c     number of centers actually explored. The default value is 6. If the
c     cases with 'n1', 'n2', ... centers are to be skipped, they should
c     be indicated after the value of 'mxcent'. For instance, the order
c    
c     MXCENT 6 3 4 
c
c     analyzes the 1- 2- 5- and 6-center localizations.
c
c======Record 44: CRITOV [ { nn | critval } ]
c
c     If the overlap of an MO with itself in a n-center domain is greater 
c     than  critov(n), the routines 'chemloc', 'itaomloc', and 'itdafh' 
c     consider that this MO is already localized on that domain. 
c     The default values for all CRITOV(1..mxcent) is 0.95. If no 
c     parameters are given after the CRITOV keyword none of the current
c     values of CRITOV(1..mxcent) are changed. If an integer number 'nn'
c     such that (1.LE.NN.LE.MXCENT) is given after the CRITOV keyword
c     the new CRITOV(nn) is given the value 'critval' (in case a real
c     number is read in after reading the value of 'nn'). Finally,
c     if a real number 'critval' is read in after the CRITOV keyword,
c     all CRITOV(1..mxcent) values will have the value 'critval' from 
c     now on. When the 'DAFHLOC' order is invoked and the WFN file
c     corresponds to a correlated wavefunction the critiv() values
c     are not checked againts the diagonal AOM values but againts the
c     eigenvalues of the pertinent DAFH matrix.
c
c======Record 44a: CRITOV1  critval 
c
c      Sets critov(1) equal to 'critval'. This order is equivalent
c      to CRITOV 1 critval
c
c======Record 44b: CRITOV2  critval 
c
c      Sets critov(2) equal to 'critval'. This order is equivalent
c      to CRITOV 2 critval
c
c=====Record 45: MAXBOND maxbond
c
c     In the progessive DAFH density partitioning (when pairs of atoms
c     are being analized) 'maxbond' represents the maximum number of 
c     bonds necessary to travel from 'atom1' to 'atom2' which is actually
c     explored; i.e. if going from 'atom1' to 'atom2' requires more
c     tham 'maxbond' bonds the pair 'atom1-atom2' is not explored.
c     The default value of 'maxbond' is 1, i.e. only directly bonded
c     atoms are considered. The maximum value of 'maxbond' is 
c     'maxmaxb = 4'.
c
c=====Record 46: SKIPH
c
c     In the progessive DAFH density partitioning (when single atoms
c     are being analized) when 'skiph=.true.' Hydrogen atoms are skipped.
c     Otherwise, hydrogen atoms are explicitely taken into account.
c     The default is 'skiph=.false.'.
c
c=====Record 47: OFMO
c
c        Orthogonalize exactly the canonical and natural MOs using
c        the OFMO method.
c
c=====Record 48: DOSYMMETRY [ { 1 | 2 | 3 } ]
c
c        Performs symmetry analysis of the molecule with method 1,
c        method 2, or method 3. The default is method 1.
c
c        1 ---> Symmetry analysis with the standard code of promolden
c        2 ---> Symmetry analysis with O. Beruski and L.N. Vidal code 
c               ( lnvidal@utfpr.edu.br )
c        3 ---> Symmetry analysis with Jose Luis Casals Sainz code
c
c=====Record 49: TOLSYM [tolsym]
c
c        With this order we change the value of the 'tolsym' parameter
c        that is used in symmetry modules and measures the tolerance
c        for identity of points,matrices,... Default value is 1e-6.

c=====Record 50: EPSSYM [epssym]
c
c        With this order we change the value of the 'epssym' parameter
c        that determines if molecular orbitals in 'transor.f' routine
c        are considered linearly independent or not. Default value is
c        1e-6.

c=====Record 51: EPSORB [epsorb]
c
c        With this order we change the value of the 'epsorb] parameter
c        that determines if molecular orbitals in 'transor.f' routine
c        break symmetry or not. Default value is 1e-4.
c
c=====Record 52: POINTGROUP pntgrp
c
c        With this record we specify the point group of the molecule
c        instead of determining it within the symmetry routines.
c
c=====Record 53: NOSYMMETRY
c
c        The symmetry is not used in the 'sym.f' module, i.e. the
c        point group of the molecule is assumed to be C1
c
c=====Record 54: OPENSYS
c
c        With this order we perform an open-system analysis, determining
c        the DNOs of all the GROUPS in a way, alternative to the DAFH 
c        analysis. This is done only in case that the wavefunction is not
c        of CCIQA type.
c
c=====Record 55: DORDM
c
c        Compute the 1-RDM in case the wavefunction is not of CCIQA 
c        type.
c
c=====Record 56, first ascii character = '#'
c
c        This indicates a non-executable comment line.
c
c=====Record 57: END
c
c        This indicates the end of the input of the current calculation
c 
c.......................................................................
c
      USE          space_for_wfnbasis
      USE          space_for_wfncoef
      USE          space_for_cidet
      USE          mod_sym
      USE          mod_periodic
      USE          space_for_sym
      include     'implicit.inc'
      include     'param.inc'
      include     'wfn.inc'
      include     'corr.inc'
      include     'stderr.inc'
      include     'constants.inc'
      include     'lengrec.inc'
      include     'fact.inc'
      include     'sym.inc'
      include     'datatm.inc'
      include     'point.inc'
      include     'integ.inc'
      integer(kind=4), parameter ::   mline   =  200
      integer(kind=4), parameter ::   numrsrs =   50
      integer(kind=4), parameter ::   maxexp  =  100
      integer(kind=4), parameter ::   lline   = 2000
      real(kind=8),    allocatable,dimension (:,:)   :: vrot
      real(kind=8),    allocatable,dimension (:)     :: work
      real(kind=8),    allocatable,dimension (:,:)   :: pnew
      real(kind=8),    allocatable,dimension (:,:,:) :: aom,aomx
      real(kind=8),    allocatable,dimension (:,:,:) :: aomtopmod
      real(kind=8),    allocatable,dimension (:,:)   :: cc
      real(kind=8),    allocatable,dimension (:,:)   :: c1et,copen
      real(kind=8),    allocatable,dimension (:,:)   :: v1mata
      real(kind=8),    allocatable,dimension (:)     :: d1mata
      real(kind=8),    allocatable,dimension (:,:,:) :: sg,sgloc,sgnat
      real(kind=8),    allocatable,dimension (:,:,:) :: dafh
      real(kind=8),    allocatable,dimension (:,:)   :: c2exc
      real(kind=8),    allocatable,dimension (:,:,:) :: sgallc
      real(kind=8),    allocatable,dimension (:,:)   :: canmo
      real(kind=8),    allocatable,dimension (:,:)   :: sgtmp
      real(kind=8),    allocatable,dimension (:)     :: vtmp
      real(kind=8),    allocatable,dimension (:)     :: oc
      real(kind=8),    allocatable,dimension (:)     :: mass
      integer(kind=4), allocatable,dimension (:,:)   :: ifugrp
      integer(kind=4), allocatable,dimension (:,:)   :: eleca,elecb
      integer(kind=4), allocatable,dimension (:)     :: nfugrp
      integer(kind=4), allocatable,dimension (:)     :: iaom
      integer(kind=4), allocatable,dimension (:)     :: ipvt
      integer(kind=4), allocatable,dimension (:)     :: icore,ival
      integer(kind=4), allocatable,dimension (:)     :: ivaloc
      integer(kind=4), allocatable,dimension (:,:)   :: icogrp
      integer(kind=4), allocatable,dimension (:)     :: mocogrp,mogrp
      integer(kind=4), allocatable,dimension (:)     :: isup,isupx
      integer(kind=4), allocatable,dimension (:)     :: ordsup
      integer(kind=4), allocatable,dimension (:)     :: maxpopul
      integer(kind=4), allocatable,dimension (:)     :: minpopul
      integer(kind=4), allocatable,dimension (:,:)   :: resnca,resncb
      real(kind=8),    allocatable,dimension (:)     :: overprim
      complex*16,      allocatable,dimension (:,:,:) :: aomcmplx
      complex*16,      allocatable,dimension (:,:,:) :: sgcmplx
      real(kind=8),    allocatable,dimension (:,:)   :: rexp
      real(kind=8),    allocatable,dimension (:,:)   :: eta
      real(kind=8),    allocatable,dimension (:)     :: ax,ay,az
      integer(kind=4), allocatable,dimension (:)     :: atnum
      real(kind=8)     rcond,deter(2),pnt(3)
      real(kind=8)     aom1,aom2,aomtot,tmpsg
      integer(kind=4), parameter :: maxc = 20
      real(kind=8),    parameter :: critovdef = 0.95D0
      real(kind=8)     critov(maxc)
      logical          ixcent(maxc)
      logical          dafhselect(maxc)
      integer(kind=4)  ndafhsel   (maxc)
      integer(kind=4)  idafhsel   (maxc,maxc,maxc)
      complex*16       aom1cmplx
      integer(kind=4)  stdout,stdin,udat,udatnw,leng,lw
      logical          setint,setword,setdble,memedf
      logical          ok,ok1,ok2,ok3,ok4,ok5,ok6
      logical          mulliken,lowdin,qtaim,mindef,becke,allcloc
      logical          mindefrho,netrho,promrho,hesel,notaom,skipcan
      logical          skiploc,skiplocx,largwr,short,wfncut,okaom,goon
      logical          iscore,ditwocent,nindep,ngless,localize
      logical          coreloc,corecan,orderp,todelete,locore
      logical          canloc,chemiloc,dafhloc,aomloc,notingroup
      logical          bonding,maxwfn,aomnorm,recur,dosymmetry 
      logical          warndafh,warnofmo,skiph,exfil,otherdafh
      logical          opensys,ok1rdm
c
      character*(mline) filedat,cicoef,word,line,uppcase,wfnfile
      character*(lline) largeline
      character*(mline) fileloc
      character*(mline) wfnloc,typepart,nres(numrsrs)
      character*(mline) lower
      character*16     namebas(100)
      integer(kind=4)  pow,nrad,nang,irmesh
      real(kind=8)     ovcritloc,ovcritcan
      real(kind=8),    parameter ::   highover    =  0.99d0
      real(kind=8),    parameter ::   smallover   =  0.80d0
      real(kind=8),    parameter ::   defepswfn   =  0.00d0
      real(kind=8),    parameter ::   deftolaom   =  0.05D0
      real(kind=8),    parameter ::   defcritics  =  0.02D0
      real(kind=8),    parameter ::   defahesel   =  2.00D0
      real(kind=8),    parameter ::   defbhesel   =  2.00d0
      real(kind=8),    parameter ::   defdamps    =  0.95d0
      real(kind=8),    parameter ::   defcovx     =  1.20d0
      real(kind=8),    parameter ::   ranmindef   = -5.00d0
      real(kind=8),    parameter ::   ranmaxdef   = +5.00d0
      real(kind=8),    parameter ::   defepsproba =  1.00D-14
      integer(kind=4), parameter ::   maxbondef   =  1
      integer(kind=4), parameter ::   maxmaxb     =  4
      integer(kind=4), parameter ::   mxcentdef   =  6
      integer(kind=4), parameter ::   mxdafhdef   =  200
c
c=======================================================================
c
c     S T A R T
c
c=======================================================================
c
      call timestamp (line)
*     call getdate (line)
      call timer (0,ipid,'_edf      ',-1)
      call timer (1,ipid,'_edf      ',-1)
c
c.....factorials
c
      fact(+0)  = 1D0
      facd(-1)  = 1d0
      facd(+0)  = 1d0
      do i=1,maxfac
        fact(i) = dble(i)*fact(i-1)
        facd(i) = dble(i)*facd(i-2)
      enddo
c
c.....Determine the size occupied by a real*8 variable in a direct
c     access file. The routine lengrec () return in the common /sizew/ 
c     the value of the variable RecLength. This variable is then used 
c     in all the routines opening direct access files.
c
      call lengrec ()
c
c.....Logical units. 
c
c     udat   = wfn file 
c     stdout = standard output
c     stdin  = standard input
c     stderr = standard error 
c     lu18   = Atomic Overlap matrix (AOM) file
c     ifilc  = Coefficients of wave function expansion in Slater dets.
c     ifilmo = Idem with Slater dets built in with localized MOs.
c     luc0   = Alpha/Beta electron configurations of Slater determinants.
c
      udat   =  1
      udatnw =  2
      stdout =  6
      stdin  =  5
      stderr =  0
      lu18   = 18
      ifilc  = 57
      ifilmo = 71
*     luc0   = 81
      lw     = stdout
c
c.....Logical variables (and their default (D) values)
c
c--Variable--D--Meaning-------------------------------------------------
c
c  skipcan   F  Exact probabilities using the input MOs are computed
c  skiplocx  F  Approximate probabilities using Localized MOs are computed
c  skiploc   T  Exact probabilities using Localized MOs are not computed
c  localize  F  Isopycnic localized MOs of the natural MOs are not computed
c  canloc    F  Isopycnic localized Canonical MOs are not computed
c  chemiloc  F  Chemical localization is not carried out
c  dafhloc   F  Iterative DAFH localization is not carried out
c  otherdafh F  The second method of succesive DAFH localizations is not
c               carried out.
c  aomloc    F  Iterative AOM localization is not carried out
c
c  short     T  Short output requested
c  coreloc   F  Core orbitals are not automatically constructed 
c               from Localized MOs
c  corecan   F  Core orbitals are not automatically constructed 
c               from canonical MOs
c  qtaim     T  QTAIM space partitioning in the computation of the AOM
c  mulliken  T  Space partitioning according to the Mulliken population 
c               analysis in the computation of the AOM
c  mindef    T  Space partitioning according to the Minimally Deformed 
c               Atoms criterion of Fernandez Rico et al. in the 
c               computation of the AOM()
c  mindefrho T  Same as above but using weights 'w_A=rho_A/rho' 
c               that always give S_ii^A>0
c  netrho    T  Same as above but using weights 'w_A=rho_A/rho' from 
c               net densities.
c  promrho   T  Same as above but using weights 'w_A=rho_A/rho' from 
c               Koga atomic densities 'rho_A' and the promolecular 
c               density 'rho' obtained as 'SUM rho_A'
c
c  hesel     T  In a chemical localization the weights defined by 
c               Andreas Heselmann are used. 
c               (A. Heselmann, JCTC 12, 2720-2741 (2016).)
c
c  becke     T  Space partitioning according to the  Becke prescription 
c               in the computation of the AOM
c  wfncut    F  When epswfn is set to a number greater than 0.0 with 
c               the EPSWFN order, wfncut is set to .true.
c
c  lowdin    T  Space partitioning according to the Lowdin population 
c               analysis in the computation of the AOM
c  orderp    T  Spinless probabilities are orderer by decreasing value 
c               when its number is smaller than NSTACK. This parameter 
c               is currently set to 4000. 
c
c  locore    F  CORE MOs from a multideterminant wavefunction are not 
c               localized before starting the calculations.
c
c  memedf    T  For closed-shell systems and multiDet WFNs the ALPHA 
c               and BETA probabilities are saved in arrays instead of
c               being stored in temporary files. This is the default
c               and in this case the routine 'mcalcedf.f' instead of 
c               'calcedf.f' is used. This option can be changed with 
c               the keyword NOMEM.
c
c  ditwocent  F The DI between all pairs of atoms is not computed. 
c               With the TWOCENDI order 'ditwocent' is set to .true.
c
c
      largwr    = .false.
      skipcan   = .false.
      skiploc   = .true.
      skiplocx  = .true.
      localize  = .false.
      canloc    = .false.
      chemiloc  = .false.
      dafhloc   = .false.
      otherdafh = .false.
      aomloc    = .false.
      short     = .true.
      wfncut    = .false.
      coreloc   = .false.
      corecan   = .false.
      allcloc   = .false.
      orderp    = .true.
      locore    = .false.
      memedf    = .true.
      ditwocent = .false.
      nindep    = .false.
      bonding   = .false.
      maxwfn    = .false.
      aomnorm   = .false.
      recur     = .false.
      sprimok   = .false.
      ngless    = .false.
      opensys   = .false.
      ok1rdm    = .false.
      ovcritloc = highover
      ovcritcan = highover
      randommin = ranmindef
      randommax = ranmaxdef 

      pow       = 3    ! Default K value in the iterative Becke scheme
      nrad      = 50   ! Default number of radial points in  "     "
      nang      = 200  ! Default number of Lebedev points    "     "
      irmesh    = 1    ! Default mapping of the radial coordinate r
      rhopow    = 1D0  ! Default power of each rho_A when computing w_A
c                        as w_A=rho_A^rhopow/SUM(rho_A^rhopow) 
c                        in the PROMRHO partition.
c
c.....tolsym = Epsilon parameter used in symmetry modules that measures 
c     the tolerance for identity of points,matrices,...
c.....epssym = Parameter that determines if molecular orbitals in transor.f 
c     are considered linearly independent or not.
c.....epsorb = Parameter that determines if molecular orbitals in transor.f
c     break symmetry or not.
c
      tolsym      = 1d-6
      epssym      = 1d-6
      epsorb      = 1d-4
      lpointgroup = .false.
      cpointgroup = 'non'
      nosym       = .false.
      dosymmetry  = .false.
      modelsym    = 1
      alphahesel  = defahesel
      betahesel   = defbhesel
      damps       = defdamps
      covx        = defcovx
      maxbond     = maxbondef
      skiph       = .false.
      dafhselect  = .false.
      mxcent      = mxcentdef
      critov(1:maxc)   = critovdef
      ixcent(1:maxc)   = .true.
      ndafhsel(1:maxc) = 0
      mxdafh      = mxdafhdef
c
c.....read names of the data files from the standard unit.
c
      write (stdout,1000) line(1:leng(line))
      read (stdin,'(a)') line
      line=uppcase(line)
      lp=1
      ok=setint(ioverlap,line,lp)
      if (.not.ok) then
        write (stderr,321) 
        stop
      endif
c
      read (stdin,'(a)') filedat
      filedat  = filedat(1:leng(filedat))
      typepart = filedat(1:leng(filedat))
      lp = 1
      ok = setword(word,typepart,lp)
      if (.not.ok) then
        stop ' # edf.f: Second record of input file is empty'
      else
        line = typepart(lp:)
      endif
c
      mulliken  = .false.
      qtaim     = .false.
      mindef    = .false.
      mindefrho = .false.
      netrho    = .false.
      promrho   = .false.
      lowdin    = .false.
      hesel     = .false.
      becke     = .false.
      if (uppcase(typepart(1:8)).eq.'MULLIKEN') then
        mulliken = .true.
      elseif (uppcase(typepart(1:6)).eq.'LOWDIN') then
        lowdin   = .true.
      elseif (uppcase(typepart(1:6)).eq.'MINDEF'.and.
     &        uppcase(typepart(1:9)).ne.'MINDEFRHO') then
        mindef   = .true.
      elseif (uppcase(typepart(1:9)).eq.'MINDEFRHO' .or.
     &        uppcase(typepart(1:5)).eq.'BECKE'     .or.
     &        uppcase(typepart(1:6)).eq.'NETRHO'    .or.
     &        uppcase(typepart(1:7)).eq.'PROMRHO'   .or.
     &        uppcase(typepart(1:9)).eq.'HESELMANN' ) then
        if (uppcase(typepart(1:9)).eq.'MINDEFRHO') mindefrho = .true.
        if (uppcase(typepart(1:5)).eq.'BECKE')     becke     = .true.
        if (uppcase(typepart(1:6)).eq.'NETRHO')    netrho    = .true.
        if (uppcase(typepart(1:7)).eq.'PROMRHO')   promrho   = .true.
        if (uppcase(typepart(1:9)).eq.'HESELMANN') hesel     = .true.
        lp       = 1
        ok       = setint(nang,line,lp)
        if (ok) then
          nang=min(abs(nang),5810)
          nang=max(nang,6)
          ok1 = setint(nrad,line,lp)
          if (ok1) then
            nrad=min(abs(nrad),5000)
            nrad=max(nrad,10)
            ok2 = setint(irmesh,line,lp)
            if (ok2) then
              irmesh=min(abs(irmesh),4)
              irmesh=max(irmesh,1)
              ok3 = setint(pow,line,lp)
              if (ok3) then
               pow=min(abs(pow),9)
               pow=max(pow,2)
               ok4 = setdble(rhopow,line,lp)
               if (ok4) then
                 rhopow = max(0.25D0,rhopow)
                 rhopow = min(2D0,rhopow)
                 ok5 = setdble(alphahesel,line,lp)
                 if (ok5) then
                   alphahesel=abs(alphahesel)
                   ok6 = setdble(betahesel,line,lp)
                   if (ok6) betahesel=abs(betahesel)
                 endif
               endif
              endif
            endif
          endif
        endif
      else
        qtaim    = .true.
      endif
c
      if (mulliken) then
        write (stdout,33) 'MULLIKEN atoms'
      elseif (lowdin) then
        write (stdout,33) 'LOWDIN atoms'
      elseif (mindef) then
        write (stdout,33) 'MINDEF atoms'
      elseif (mindefrho) then
        write (stdout,33) 'MINDEFRHO atoms'
      elseif (netrho) then
        write (stdout,33) 'NETRHO atoms'
      elseif (promrho) then
        write (stdout,33) 'PROMRHO atoms'
      elseif (hesel) then
        write (stdout,33) 'HESELMANN atoms'
      elseif (becke) then
        write (stdout,33) 'BECKE atoms'
      else
        write (stdout,33) filedat(1:leng(filedat))
        if (ioverlap.lt.2.or.ioverlap.eq.4) then ! not topmod file
          open (lu18,file=filedat,status='old',iostat=ierr)
        else                    ! topmod file
          open (lu18,file=filedat,status='old',form='unformatted',
     &          iostat=ierr)
        endif
        if (ierr.ne.0) then
          write (stderr,*) '# edf.f: Error opening AOM file'
          stop
        endif
      endif
c
c-----Here an IF THEN ...ELSE only for non complex AOM.
c
      if (ioverlap.ne.-1) then
        read (stdin,'(a)') wfnfile
        wfnfile=wfnfile(1:leng(wfnfile))
        open (udat,file=wfnfile,status='old')
        write (stdout,34) wfnfile(1:leng(wfnfile))
c
c.......Read wave function.
c
        call rdwfn (udat,stdout,stderr,ifilc,mal,mbe,wfnfile,cicoef)
c
c.......Print coordinates of all the atoms and definition of the groups.
c
        write (stdout,501) 
        write (stdout,503)
        do i=1,ncent
          write (stdout,103) atnam(i)(1:4),i,(xyz(i,k),k=1,3),charge(i)
        enddo
c
c-------EFM---I think this line is unnecessary
c
*       natoms=ncent
c
        write (stdout,21) nel,nmo
        if (ndets.gt.1) then
          write (stdout,361) ndets,nelact,ncore,nact
        else
          ncore=0
          write (stdout,36) ndets
          if (onecsdet) write (stdout,363) 'RHF '
          if (uhf)      write (stdout,363) 'UHF'
          if (rohf)     write (stdout,363) 'ROHF'
        endif
        if (qtaim.and.largwr) then
          if (ioverlap.eq.0) write (stdout,55) 'PROMOLDEN'
          if (ioverlap.ne.0) write (stdout,55) 'AIMPAC'
          if (ioverlap.eq.2) write (stdout,55) 'TOPMODELF'
          if (ioverlap.eq.3) write (stdout,55) 'TOPMODAIM'
          if (ioverlap.eq.4) write (stdout,55) 'AIMALL'
        endif
        cicoef=cicoef(1:leng(cicoef))
c
c.......Direct access file of wave function coefficients is open.
c
        open (ifilc,file=cicoef,access='direct',
     &      recl=RecLength*(nelact+1),form='unformatted')
c
c.......Read Atomic overlap matrix (AOM). 
c
c       TOPMOD. The number of basins is different to the number of atoms.
c       The file containing the integrals is written in double precision. 
c       Read it and convert it to quadruple.
c
        if (ioverlap.eq.2.or.ioverlap.eq.3) then
          read (lu18) nbasins, nmo, natoms
        endif
c
        if (qtaim) then
          if (ioverlap.lt.2.or.ioverlap.eq.4) then
            if (.not.allocated(aom)) then
              allocate (aom(ncent,nmo,nmo),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate aom()'
            endif
            if (.not.allocated(iaom)) then
              allocate (iaom(ncent),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate iaom()'
            endif
            iaom=0
            do i=1,ncent
              read (lu18,*) iaom(i)
              if (iaom(i).gt.ncent) then
                write (stderr,17) iaom(i),ncent
                stop
              endif
              if (largwr) write (stdout,16) iaom(i)
              if (ioverlap.eq.0) then
c
c...............Promolden format
c
                nmonn=nmo
                read (lu18,80) ((aom(iaom(i),m,j),m=1,j),j=1,nmonn)
              elseif (ioverlap.eq.4) then
c
c...............AIMALL format
c
                do m=1,nmo
                  read (lu18,1701) (aom(iaom(i),j,m),j=1,m)     ! AIMPAC
                enddo
              else
c
c...............AIMPAC format
c
                do m=1,nmo
                  read (lu18,1700) (aom(iaom(i),j,m),j=1,m)     ! AIMPAC
                enddo
              endif
            enddo
c
c...........topmod
c
          elseif (ioverlap.eq.2.or.ioverlap.eq.3) then    !topmod
            ncent=nbasins
            read (lu18) (namebas(i),i=1,ncent)
            if (ioverlap.eq.2) then
              write(stdout,*) '# USING TOPMOD ELF BASINS'
              write (stdout, *) '# Number of elf basins, names', ncent
              write (stdout,*) (namebas(i),i=1,ncent)
            endif
            if (.not.allocated(iaom)) then
              allocate (iaom(ncent),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate iaom()'
            endif
            if (.not.allocated(aomtopmod)) then
              allocate (aomtopmod(ncent,nmo,nmo),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate aomtopmod()'
            endif
            do i=1,ncent
              iaom(i)=i
              read (lu18) ((aomtopmod(iaom(i),j,m),m=j,nmo),j=1,nmo)
            enddo
            if (ioverlap.eq.3) then    !aim
              ncent=natoms
              read (lu18) (namebas(i),i=1,ncent)
              write(stdout,*) '# USING TOPMOD AIM BASINS'
              write (stdout, *) '# Number of qtaim basins, names', ncent
              write (stdout,*) (namebas(i),i=1,ncent)
              if (allocated(iaom)) then
                deallocate(iaom,stat=ier)
                if (ier.ne.0) stop 'edf.f: Cannot deallocate iaom()'
              endif
              if (allocated(aomtopmod)) then
                deallocate(aomtopmod,stat=ier)
                if (ier.ne.0) then
                   stop 'edf.f: Cannot deallocate aomtopmod()'
                endif
              endif
              if (.not.allocated(iaom)) then
                allocate (iaom(ncent),stat=ier)
                if (ier.ne.0) stop 'edf.f: Cannot allocate iaom()'
              endif
              if (.not.allocated(aomtopmod)) then
                allocate (aomtopmod(ncent,nmo,nmo),stat=ier)
                if (ier.ne.0) stop 'edf.f: Cannot allocate aomtopmod()'
              endif
              do i=1,ncent
                iaom(i)=i
                read (lu18) ((aomtopmod(iaom(i),j,m),m=j,nmo),j=1,nmo)
              enddo
            endif
            if (.not.allocated(aom)) then
              allocate (aom(ncent,nmo,nmo),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate aom()'
            endif
            aom=aomtopmod
            if (allocated(aomtopmod)) then
              deallocate(aomtopmod,stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot deallocate aomtopmod()'
            endif
          endif
          close (lu18)
        else
          call timer (2,ifuzan,'_fuzzy    ',-1)
c
c---------Orthogonalize exactly canonical and natural MOs using OFMO
c
          write (stdout,10)
          if (.not.allocated(eta)) then
            allocate (eta(nmo,nmo),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate eta()'
          endif
          call ofmortho (coef,eta,nmo,nprims,warnofmo,stdout)
          if (warnofmo) then
             stop ' # edf.f: Singular matrix in ofmortho.f'
          else
             write (stdout,*) '# OFMO orthogonalization ends Ok!'
          endif
          if (allocated(eta)) then
            deallocate (eta,stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot deallocate eta()'
          endif
          if (.not.allocated(aom)) then
            allocate (aom(ncent,nmo,nmo),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate aom()'
          endif
          if (.not.allocated(iaom)) then
            allocate (iaom(ncent),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate iaom()'
          endif
          forall (i=1:ncent) iaom(i)=i
          if (mulliken) then
            call aomulliken (aom,0,.true.,stdout,wfnfile)
          elseif (mindef) then
            call aomindef (aom,0,.true.,stdout,wfnfile)
          elseif (mindefrho.or.netrho.or.promrho.or.hesel) then
            if (mindefrho) irho=1
            if (netrho)    irho=2
            if (promrho)   irho=3
            if (hesel)     irho=4
            if (.not.allocated(cc)) then
              allocate (cc(nmo+nmo,nprims),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate cc()'
            endif
*           cc(1:nmo+nmo,1:nprims)=coef(1:nmo+nmo,1:nprims)
            cc=coef
            call aomindefrho (aom,alphahesel,betahesel,
     &           irho,nrad,nang,irmesh,rhopow,.true.,cc,stdout,wfnfile)
            if (allocated(cc)) then
              deallocate (cc,stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot deallocate cc()'
            endif
          elseif (lowdin) then
            call aomlowdin (aom,0,.true.,stdout,wfnfile)
          elseif (becke) then
            if (.not.allocated(cc)) then
              allocate (cc(nmo,nprims),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate cc()'
            endif
            cc(1:nmo,1:nprims)=coef(nmo+1:nmo+nmo,1:nprims)
            call aombecke 
     &        (aom,nrad,nang,pow,irmesh,.true.,cc,stdout,wfnfile)
            if (allocated(cc)) then
              deallocate (cc,stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot deallocate cc()'
            endif
          endif
          call timer (4,ifuzan,'_fuzzy    ',-1)
        endif
c
c.......Test if the AOM has been read in or computed for all the basins.
c
        notaom=.false.
        do i=1,ncent
          j=1
          okaom=.false.
          do while (j.le.ncent.and.(.not.okaom))
            if (iaom(j).eq.i) okaom=.true.
            j=j+1
          enddo
          if (.not.okaom) then
            notaom=.true.
            write (stderr,15) i
          endif
 14     enddo
        if (notaom) stop ' # edf.f: !! Bad definition of the AOM'
c
c.......Fill in the lower part of the aom() array.
c
        if (qtaim) then
          do m=1,nmo
            do j=1,m
              aom(1:ncent,m,j)=aom(1:ncent,j,m)
            enddo
          enddo
        endif
c
*       if (allocated(iaom)) then
*         deallocate (iaom,stat=ier)
*         if (ier.ne.0) stop 'edf.f: Cannot deallocate iaom()'
*       endif
      else
c
c.......COMPLEX AOM CASE
c
        call edfx (stdin,stdout,lu18)
        call timer (5,ipid,'_edf      ',stdout)
*       call getdate (line)
        call timestamp (line)
        write (stdout,2000) line(1:leng(line))
        stop 'edf: End of Run Ok !!!'
      endif
c 
c.....Initizalize some variables
c
      epsdet     = zero
      epsproba   = defepsproba
      tolaom     = deftolaom
      epswfn     = defepswfn
      epswfnloc  = defepswfn
      critics    = defcritics
      probcut    = zero
      nactdet    = ndets
      ngroup     = izero
      mocore     = izero
      moval      = nmo
      nrsrs      = izero
      if (.not.allocated(ival)) then
        allocate (ival(nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate ival()'
      endif
      if (.not.allocated(icore)) then
        allocate (icore(nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate icore()'
      endif
      forall (i=1:moval) ival(i)=i
c
c-----------------------------------------------------------------------
c
c       BEGIN READING PARTICULAR CONDITIONS OF THE RUN
c
c-----------------------------------------------------------------------
c
      goon=.true.
 20   do while (goon) 
        read (stdin,'(a)',end=110) line
        line=uppcase(line)
        lp=1
        ok=setword(word,line,lp)
        lword=leng(word)
        if (lword.eq.0.or.word(1:1).eq.'#') then
        elseif (word(1:lword).eq.'END') then
          goon=.false.
        elseif (word(1:lword).eq.'PRSRS') then
          nrsrs = nrsrs + 1
          if (nrsrs.le.numrsrs) then
             nres(nrsrs) = line(lp:)
          else
            nrsrs=nrsrs-1
            write (stderr,*) '# edf.f: Too many PRSRS orders'
            write (stderr,*) '# edf.f: Maximum value is ',numrsrs
          endif
        elseif (word(1:lword).eq.'LARGE') then
          short = .false.
        elseif (word(1:lword).eq.'RECUR') then
          recur = .true.
        elseif (word(1:lword).eq.'AOMNORM') then
          aomnorm   = .true.
c
c.........Test consistency of AOM elements
c
          do m=1,nmo
            do j=1,m
              sumaom=0d0
              do ii=1,ncent
                sumaom=sumaom+aom(ii,j,m)
              enddo
              valueaom=1d0
              if (j.ne.m) valueaom=0d0
              diffaom=abs(sumaom-valueaom)
              if (diffaom.gt.tolaom) write (stderr,544) m,j,sumaom
            enddo
          enddo
          line=line(lp:)
          lp=1
          ok=setint(iren,line,lp)
          if (ok) then
            if (iren.eq.0) iren=1
            iren=min(iabs(iren),ncent)
          else
            iren=ncent
          endif
c     
c.........Modify the AOM elements of center IREN such that 
c         SUM (i=1,ncent) aom(i,m,j) will be exactly 0 or 1.
c
          write (stdout,335) iren
          do j=1,nmo
            do m=1,nmo
              aom2=aom(iren,m,j)
              aom1=zero
              do i=1,ncent
                if (i.ne.iren) aom1=aom1+aom(i,m,j)
              enddo
              aomtot=aom1+aom2
              if (m.eq.j) then
                if (aomtot.lt.zero) aom(iren,m,j)=aom2-(one-abs(aomtot))
                if (aomtot.ge.zero) aom(iren,m,j)=aom2+(one-abs(aomtot))
              else
                aom(iren,m,j)=-aom1
              endif
            enddo
          enddo
        elseif (word(1:6).eq.'FULLOC' .or. 
     &          word(1:6).eq.'CANLOC' .or.
     &          word(1:6).eq.'AOMLOC' .or.
     &          word(1:7).eq.'DAFHLOC' .or.
     &          word(1:7).eq.'CHEMLOC') then
          if (word(1:6).eq.'FULLOC')  localize = .true.
          if (word(1:6).eq.'CANLOC')  canloc   = .true.
          if (word(1:6).eq.'AOMLOC')  aomloc   = .true.
          if (word(1:7).eq.'CHEMLOC') chemiloc = .true.
          if (word(1:7).eq.'DAFHLOC') dafhloc  = .true.
          ok=setword(word,line,lp)
          if (ok) then
            if (word(1:3).eq.'ALL') then
              allcloc=.true.
            else
              allcloc=.false.
            endif
          endif
        elseif (word(1:lword).eq.'DODAFH') then
           line=line(lp:)
           call allocate_space_for_dafh (mxdafh,ncent)
           call dodafh (stdin,stdout,mxdafh)
           otherdafh = .true.
           allcloc = .true.
        elseif (word(1:lword).eq.'OPENSYS') then
          opensys = .true.
        elseif (word(1:lword).eq.'DORDM') then
          ok1rdm = .true.
        elseif (word(1:lword).eq.'NOPROB') then
          skipcan = .true.
        elseif (word(1:lword).eq.'PROBLOC') then
          skiploc = .false.
        elseif (word(1:lword).eq.'NOPROBX') then
          skiplocx = .true.
        elseif (word(1:lword).eq.'PROBCUT') then
          line=line(lp:)
          read (line,*) probcut
        elseif (word(1:lword).eq.'EPSDET') then
          line=line(lp:)
          read (line,*) epsdet
          epsdet=abs(epsdet)
        elseif (word(1:lword).eq.'RHOPOW') then
          line=line(lp:)
          lp=1
          ok=setdble(rhopow,line,lp)
          if (ok) then
            rhopow = abs(rhopow)
            rhopow = max(0.25D0,rhopow)
            rhopow = min(2D0,rhopow)
          endif
        elseif (word(1:lword).eq.'CRITICS') then
          line=line(lp:)
          lp=1
          ok=setdble(critics,line,lp)
          if (ok) then
            critics=abs(critics)
            critics=min(critics,1D-1)
            critics=max(critics,1D-6)
          endif
        elseif (word(1:lword).eq.'CRITOV') then
          line=line(lp:)
          lp=1
          lpold=lp
          ok=setint(ncritov,line,lp)
          if (ok) then
            if (ncritov.gt.0.and.ncritov.lt.maxc) then
              ok=setdble(critval,line,lp)
              if (ok) critov(ncritov)=abs(critval)
            endif
          else
            ok=setdble(critval,line,lpold)
            if (ok) critov(1:maxc)=critval
          endif
        elseif (word(1:lword).eq.'CRITOV1') then
          line=line(lp:)
          lp=1
          ok=setdble(critov(1),line,lp)
          if (ok) then
            critov(1)=abs(critov(1))
            if (critov(1).gt.0.995d0) critov(1)=0.995d0
            if (critov(1).lt.0.600d0) critov(1)=0.600d0
          endif
        elseif (word(1:lword).eq.'CRITOV2') then
          line=line(lp:)
          lp=1
          ok=setdble(critov(2),line,lp)
          if (ok) then
            critov(2)=abs(critov(2))
            if (critov(2).gt.0.995d0) critov(2)=0.995d0
            if (critov(2).lt.0.600d0) critov(2)=0.600d0
          endif
        elseif (word(1:lword).eq.'DAMPS') then
          line=line(lp:)
          lp=1
          ok=setdble(damps,line,lp)
          if (ok) then
            damps=abs(damps)
            if (damps.gt.0.999d0) damps=0.999d0
            if (damps.lt.0.800d0) damps=0.800d0
          endif
        elseif (word(1:lword).eq.'MXCENT') then
          line=line(lp:)
          lp=1
          ok=setint(mxcent,line,lp)
          if (ok) then
            line=line(lp:)
            lp=1
            mxcent=abs(mxcent)
            if (mxcent.gt.maxc) mxcent=maxc 
            if (mxcent.lt.1)  mxcent=1
            ok1=.true.
            do while (ok1) 
              ok1=setint(nn,line,lp)
              if (ok1.and.nn.ge.1.and.nn.le.maxc) then
                ixcent(nn) = .false.
              endif
            enddo
          endif
        elseif (word(1:lword).eq.'DAFHSELECT') then
          line=line(lp:)
          lp=1
          if (setint(nn,line,lp)) then
            if (nn.ge.1.and.nn.le.maxc) then
              dafhselect(nn) = .true.
              ndafhsel(nn) = ndafhsel(nn) + 1
              inu = ndafhsel(nn)
              nlista=0
              donn: do
                ok=setint(natis,line,lp)
                if (ok) then
                  ok=ok.and.natis.gt.0.and.natis.le.ncent
                  if (ok) then
                    do i=1,nlista
                      if (natis.eq.idafhsel(nn,inu,i)) cycle donn
                    enddo
                    nlista=nlista+1
                    idafhsel(nn,inu,nlista)=natis
                  endif
                else
                  exit donn
                endif
              enddo donn
              if (nlista.ne.nn) then
                stop 'edf.f: Wrong DAFHSELECT order format'
              endif
            endif
          endif
        elseif (word(1:lword).eq.'COVX') then
          line=line(lp:)
          lp=1
          ok=setdble(covx,line,lp)
          if (ok) then
            covx=abs(covx)
            if (covx.gt.5.0d0) covx=5.0d0
            if (covx.lt.0.5d0) covx=0.5d0
          endif
        elseif (word(1:lword).eq.'SKIPH') then
          skiph = .true.
        elseif (word(1:lword).eq.'MAXBOND') then
          line=line(lp:)
          lp=1
          ok=setint(maxbond,line,lp)
          if (ok) then
            maxbond=max(abs(maxbond),maxbondef)
            maxbond=min(maxbond,maxmaxb)
          endif
        elseif (word(1:lword).eq.'ALPHA_HESELMANN') then
          line=line(lp:)
          lp=1
          ok=setdble(alphahesel,line,lp)
          if (ok) alphahesel=abs(alphahesel)
        elseif (word(1:lword).eq.'BETA_HESELMANN') then
          line=line(lp:)
          lp=1
          ok=setdble(betahesel,line,lp)
          if (ok) betahesel=abs(betahesel)
        elseif (word(1:lword).eq.'KPOWER') then
          line=line(lp:)
          lp=1
          ok=setint(pow,line,lp)
          if (ok) then
            pow=min(abs(pow),9)
            pow=max(pow,2)
          endif
        elseif (word(1:lword).eq.'LEBEDEV') then
          line=line(lp:)
          lp=1
          ok=setint(nang,line,lp)
          if (ok) then
            nang=min(abs(nang),5810)
            nang=max(nang,6)
          endif
        elseif (word(1:lword).eq.'NRAD') then
          line=line(lp:)
          lp=1
          ok=setint(nrad,line,lp)
          if (ok) then
            nrad=min(abs(nrad),5000)
            nrad=max(nrad,10)
          endif
        elseif (word(1:lword).eq.'IRMESH') then
          line=line(lp:)
          lp=1
          ok=setint(irmesh,line,lp)
          if (ok) then
            irmesh=min(abs(irmesh),4)
            irmesh=max(irmesh,1)
          endif
        elseif (word(1:lword).eq.'EPSPROBA') then
          line=line(lp:)
          lp=1
          ok=setdble(epsproba,line,lp)
          if (ok) then
            epsproba=min(abs(epsproba),1D-1)
          endif
        elseif (word(1:lword).eq.'TOLAOM') then
          line=line(lp:)
          lp=1
          ok=setdble(tolaom,line,lp)
          if (ok) tolaom=max(abs(tolaom),1D-3)
        elseif (word(1:lword).eq.'EPSWFN') then
          line=line(lp:)
          read (line,*) epswfnew
          epswfn=max(abs(epswfnew),epswfn)
          if (epswfn.gt.defepswfn) wfncut=.true.
        elseif (word(:lword).eq.'TOLSYM') then
          line=line(lp:)
          read (line,*) tolsym
          tolsym=abs(tolsym)
        elseif (word(:lword).eq.'EPSSYM') then
          line=line(lp:)
          read (line,*) epssym
          epssym=abs(epssym)
        elseif (word(:lword).eq.'EPSORB') then
          line=line(lp:)
          read (line,*) epsorb
          epsorb=abs(epsorb)
        elseif (word(:lword).eq.'DOSYMMETRY') then
          dosymmetry=.true.
          line=line(lp:)
          lp=1
          ok=setint(modelx,line,lp)
          if (ok.and.modelx.ge.1.and.modelx.le.3) then
            modelsym=modelx
          endif
          largwr=.not.short
          call dosym (ncent,nmo,nprims,neq,stdout,modelsym,largwr)
        elseif (word(:lword).eq.'POINTGROUP') then
          line=line(lp:)
          read (line,'(a)') cpointgroup
          cpointgroup=lower(cpointgroup)
          lpointgroup=.true.   
        elseif (word(:lword).eq.'NOSYMMETRY') then
          nosym=.true.
        elseif (word(1:lword).eq.'EPSWFNLOC') then
          line=line(lp:)
          read (line,*) epswfnew
          epswfnloc=max(abs(epswfnew),epswfnloc)
        elseif (word(1:lword).eq.'BONDING') then
          bonding=.true.
        elseif (word(1:lword).eq.'TWOCENDI') then
          ditwocent = .true.
          epsbond=one
          line=line(lp:)
          lp=1
          ok=setdble(epsbond,line,lp)
          if (ok) epsbond=abs(epsbond)
        elseif (word(1:lword).eq.'NDETS') then
          line=line(lp:)
          read (line,*) nactdet
          nactdet=min(iabs(nactdet),ndets)
          if (icorr) write (stdout,28) nactdet
c
c---------Orthogonalize exactly canonical and natural MOs using OFMO
c
        elseif (word(1:lword).eq.'OFMO') then
          write (stdout,10)
          if (.not.allocated(eta)) then
            allocate (eta(nmo,nmo),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate eta()'
          endif
          call ofmortho (coef,eta,nmo,nprims,warnofmo,stdout)
          if (warnofmo) then
             stop ' # edf.f: Singular matrix in ofmortho.f'
          else
             write (stdout,*) ' # OFMO orthogonalization ends Ok!'
          endif
          if (allocated(eta)) then
            deallocate (eta,stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot deallocate eta()'
          endif
        elseif (word(1:lword).eq.'LOCORE') then
           if (ncore.gt.0) locore=.true.
        elseif (word(1:lword).eq.'LOCSOME') then
           line=line(lp:)
           call locsome (aom,line,stdout,.not.short)
        elseif (word(1:lword).eq.'NOMEM') then
           memedf=.false.
        elseif (word(1:lword).eq.'CGEDF') then
           line=line(lp:)
           call cgedfp (line,wfnfile,
     &      probcut,ngroup,stdout,aom,nfugrp,ifugrp,orderp)
        elseif (word(1:lword).eq.'RHOCOND') then
           line=line(lp:)
           call rhocond
     &     (line,wfnfile,udat,ngroup,stdout,aom,nfugrp,ifugrp)
        elseif (word(1:lword).eq.'ALLRHOC') then
           call allrhoc (wfnfile,udat,ngroup,stdout,aom,nfugrp,ifugrp)
        elseif (word(1:lword).eq.'RHOALLS') then
           line=line(lp:)
           call rhoalls (line,wfnfile,
     &      udat,ngroup,stdout,aom,nfugrp,ifugrp)
        elseif (word(1:lword).eq.'COREMO') then
           coreloc=.true.
           corecan=.true.
           line=line(lp:)
           lp=1
           ok=setdble(ovcritcan,line,lp)
           if (ok) then
             ovcritcan=max(abs(ovcritcan),smallover)
             ovcritloc=max(abs(ovcritcan),smallover)
           endif
        elseif (word(1:lword).eq.'NOORDER') then
          orderp = .false.
        elseif (word(1:lword).eq.'SUPPRESS') then
           line=line(lp:)
           call suppress (aom,udat,filedat,wfnfile,line,stdout)
        elseif (word(1:lword).eq.'MXDAFH') then
          ok=setint(mxdafh,line,lp)
          if (ok) mxdafh=abs(mxdafh)
        elseif (word(1:lword).eq.'DELETE') then
           line=line(lp:)
           if (.not.allocated(aomx)) then
             allocate (aomx(ncent,nmo,nmo),stat=ier)
             if (ier.ne.0) stop 'edf.f: Cannot allocate aomx()'
           endif
           aomx(1:ncent,1:nmo,1:nmo)=aom(1:ncent,1:nmo,1:nmo)
           call delmo (aomx,mal,mbe,line,stdout)
           aom(1:ncent,1:nmo,1:nmo)=aomx(1:ncent,1:nmo,1:nmo)
           if (allocated(aomx)) then
             deallocate (aomx,stat=ier)
             if (ier.ne.0) stop 'edf.f: Cannot deallocate aomx()'
           endif
        elseif (word(1:lword).eq.'NGROUP' .or.
     &          word(1:lword).eq.'NINDEP') then
          if (word(1:lword).eq.'NINDEP') nindep   = .true.
          ok=setint(ngroup,line,lp)
          if (ok.and.ngroup.lt.0) then
            ngroup=-ngroup
            ngless=.true.
          endif
          ok=ok.and.ngroup.gt.0 
          if (ok) then
            ngroup=abs(ngroup)
c
c...........Maximum number of fragments = number of atoms.
c
            if (ngroup.gt.ncent) then
              write (stderr,*)
              write (stderr,*) '# Too many groups (ngroup > ncent)' 
              write (stderr,*)
              stop
            endif
            if (.not.allocated(ifugrp)) then
              allocate (ifugrp(ncent,ngroup),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate ifugrp()'
            endif
            if (.not.allocated(nfugrp)) then
              allocate (nfugrp(ngroup),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate nfugrp()'
            endif
            if (.not.allocated(eleca)) then
              allocate (eleca(2,ngroup),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate eleca()'
            endif
            if (.not.allocated(elecb)) then
              allocate (elecb(2,ngroup),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate elecb()'
            endif
            nfugrp  = izero
            ngroupto = ngroup
            if (ngless) ngroupto=ngroup-1
            ntot=0
            do i=1,ngroupto
              read (stdin,'(a)') line
              lp=1
              ok=setint(nfugrp(i),line,lp)
              if (.not.ok) then
                write (stderr,*) 'edf.f: Error defining fragment',i
                stop
              endif
              ntot=ntot+nfugrp(i)
              do j=1,nfugrp(i)
                ok=setint(ifugrp(j,i),line,lp)
                if (.not.ok) then
                  write (stderr,*) 'edf.f: Error defining fragment',i
                  stop
                endif
              enddo
              eleca(1,i)=izero
              elecb(1,i)=izero
              eleca(2,i)=nalpha
              elecb(2,i)=nbeta
c
c.............Test that the group is not empty of atoms.
c
              if (nfugrp(i).eq.0) then
                write (stderr,*) '# edf.f: Group ',i,' empty of atoms'
                stop ' # edf.f: GROUP empty of atoms.'
              endif
c
c.............Test that each atom only belongs to a group.
c
              if (i.gt.1) then
                 do k=1,i-1
                   do m=1,nfugrp(k)
                     do l=1,nfugrp(i)
                       if (ifugrp(l,i).eq.ifugrp(m,k)) then
                          write (stderr,*) 
                          write (stderr,432) l,i,m,k
                          write (stderr,*) 
                          stop
                       endif
                     enddo
                   enddo
                 enddo
              endif
            enddo
            if (ngless) then
               nfugrp(ngroup) = izero
              eleca(1,ngroup) = izero
              elecb(1,ngroup) = izero
              eleca(2,ngroup) = nalpha
              elecb(2,ngroup) = nbeta
              cyclem: do m=1,ncent
                do i=1,ngroup-1
                  do l=1,nfugrp(i)
                    if (ifugrp(l,i).eq.m) cycle cyclem
                  enddo
                enddo
                nfugrp(ngroup)=nfugrp(ngroup) + 1
                ifugrp(nfugrp(ngroup),ngroup) = m
              enddo cyclem
            endif
          endif
          allocate (maxpopul(ngroup))
          allocate (minpopul(ngroup))
          maxpopul(:)=max(nalpha,nbeta)
          minpopul(:)=0
        elseif (word(1:lword).eq.'MAXPOP'.or.
     &          word(1:lword).eq.'MINPOP') then
          if (ngroup.gt.0.and.nrsrs.gt.0) then
            if (allocated(maxpopul).and.allocated(minpopul)) then
              ll=lword
              line=line(lp:)
              if (word(1:ll) .eq. 'MAXPOP') then
                read (line,*,iostat=ier) (maxpopul(i),i=1,ngroup)
                if (ier.ne.0) stop ' # edf.f: Error in MAXPOP order'
              else
                read (line,*,iostat=ier) (minpopul(i),i=1,ngroup) 
                if (ier.ne.0) stop ' # edf.f: Error in MINPOP order'
              endif
            endif
          endif
        elseif (word(1:lword).eq.'RANDOM') then
          line=line(lp:)
          lp=1
          ok = setdble(ranmin,line,lp)
          if (ok) ok=setdble (ranmax,line,lp)
          randommax=max(ranmin,ranmax)
          randommin=min(ranmin,ranmax)
        elseif (word(1:lword).eq.'MAXWFN') then
          maxwfn=.true.
c
c-----------------------------------------------------------------------
c
c......The following keywords have no sense here but they have in the 
c      'optedf.f' module. Here, DO NOTHING.
c
        elseif (word(1:lword).eq.'ENDBONDING') then
        elseif (word(1:lword).eq.'WEDF')       then
        elseif (word(1:lword).eq.'WPOP')       then
        elseif (word(1:lword).eq.'WDIS')       then
        elseif (word(1:lword).eq.'EPSBOND')    then
        elseif (word(1:lword).eq.'INICVAR')    then
        elseif (word(1:lword).eq.'PRIN')       then
        elseif (word(1:lword).eq.'TYPE')       then
        elseif (word(1:lword).eq.'TYPE3C')     then
        elseif (word(1:lword).eq.'PAIR')       then
        elseif (word(1:lword).eq.'TRIO')       then
        elseif (word(1:lword).eq.'PLUS')       then
        elseif (word(1:lword).eq.'MINUS')      then
c
c.......The following keywords have no sense here but they have in the 
c       'wfnmax.f' module. Here, DO NOTHING.
c
        elseif (word(1:lword).eq.'GTOL')       then
        elseif (word(1:lword).eq.'MAXIT')       then
        elseif (word(1:lword).eq.'MUP')       then
        elseif (word(1:lword).eq.'IPRINT')       then
        elseif (word(1:lword).eq.'CONFIG')       then
c
c-----------------------------------------------------------------------
c
        else
          write (stderr,'(a)') ' # '//word(1:lword)
          write (stderr,*) '# Key word in input file not understood'
        endif
      enddo
 110  continue
c
c-----------------------------------------------------------------------
c
c       END READING PARTICULAR CONDITIONS OF THE RUN
c
c-----------------------------------------------------------------------
c
c.....Test again consistency of AOM elements in case AOMNORM keyword
c     has not been read in.
c
      do m=1,nmo
        do j=1,m
          sumaom=sum(aom(:,j,m))
          valueaom=1d0
          if (j.ne.m) valueaom=0d0
          diffaom=abs(sumaom-valueaom)
          if (diffaom.gt.tolaom) write (stderr,544) m,j,sumaom
        enddo
      enddo
c
c.....If none orbital localization is  carried out, skip computation
c     of the exact and approximate EDF in terms of localized MOs. 
c
      if ((.not.localize).and.(.not.canloc).and.(.not.chemiloc).and.
     &  (.not.dafhloc).and.(.not.aomloc).and.(.not.otherdafh)) then
        skiploc  = .true.
        skiplocx = .true.
      endif
c
c.....Localize CORE MOs replacing the original MOs of the wavefuncion
c
      if (locore) call isopycore (aom,stdout,.not.short)
c
c.....No matter whether coreloc is .true. or .false. the
c     CORE aproximations CAN NOT BE USED with multideterminantal
c     wavefunctions made of localized MOs.
c
      if (ndets.ne.1) coreloc = .false.

      if ((.not.skiploc).and.(.not.skiplocx))
     & write (stdout,37) epsdet,epswfn,epswfnloc,probcut,epsproba
c
c.....If ngroup <= 0 ==> each atom is a group with a minimum (maximum)
c     electronic population equal to 0 (nel).
c
      if (ngroup.le.izero) then
        ngroup=ncent 
        if (.not.allocated(ifugrp)) then
          allocate (ifugrp(ncent,ngroup),stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot allocate ifugrp()'
        endif
        if (.not.allocated(nfugrp)) then
          allocate (nfugrp(ngroup),stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot allocate nfugrp()'
        endif
        if (.not.allocated(eleca)) then
          allocate (eleca(2,ngroup),stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot allocate eleca()'
        endif
        if (.not.allocated(elecb)) then
          allocate (elecb(2,ngroup),stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot allocate elecb()'
        endif
        do i=1,ngroup
          nfugrp(i)=1
          ifugrp(1,i)=i
          eleca(1,i)=izero
          elecb(1,i)=izero
          eleca(2,i)=nalpha
          elecb(2,i)=nbeta
        enddo
      endif
c
c.....allocate arrays for group overlap integrals between canonical
c     and natural MOs.
c
      if (.not.allocated(sg)) then
        allocate (sg(ngroup,nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate sg()'
      endif
      if (.not.allocated(sgnat)) then
        allocate (sgnat(ngroup,nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate sgnat()'
      endif
c
c.....Obtain group overlap integrals.
c
      sg=zero
      if (ngroup.eq.1) then
        forall (m=1:nmo) sg(1,m,m)=one
      else
        do k=1,ncent
          do ngr=1,ngroup
            do i=1,nfugrp(ngr)
              if (ifugrp(i,ngr).eq.k) then
                 sg(ngr,:,:)=sg(ngr,:,:)+aom(k,:,:)
              endif
            enddo
          enddo
        enddo
      endif
c
c.....If the wavefunction has a single determinant, the canonical
c     and natural MOs are equal and the group overlap integrals
c     are the same. 
c
      if (.not.icorr) sgnat = sg
      if (     icorr) numdet=nactdet
      if (.not.icorr) numdet=1
      largwr=.not.short
c
c.....Cut the wavefunctions elliminating coefficients with an absolute 
c     value smaller than epswfn. The NUMDET parameter may possibly
c     differ before and after calling the cutwfn routine.
c
      if (icorr.and.wfncut) then
        numdetprev=numdet
        call cutwfn (epswfn,ifilc,numdet,nelact)
        write (stdout,87) epswfn,numdetprev,numdet
      endif
c
      if (.not.allocated(c1et)) then
        allocate (c1et   (nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate c1et()'
      endif
      if (.not.allocated(v1mata)) then
        allocate (v1mata (nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate v1mata()'
      endif
      if (.not.allocated(d1mata)) then
        allocate (d1mata (nmo),    stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate d1mata()'
      endif
c
c-----Compute 1-RDM, update natural MOs and compute AOM between
c     these updated natural MOs.
c
      if (.not.cciqa) then
        call srhon (epsdet,ifilc,c1et,numdet,ncore,nelact,nmo)
        if (largwr.or.ok1rdm) then
          write (lw,*) '#'
          write (lw,*) '# TOTAL 1st-order density matrix'
          write (lw,*) '# (( rho (k,l), k=1,nmo), l=1,k)'
          do i=1,nmo
            write (lw,444) (c1et(i,j),j=1,i)
          enddo
        endif
        if (opensys) then
          if (.not.allocated(copen)) then
            allocate (copen (nmo,nmo),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate copen()'
          endif
          copen (1:nmo,1:nmo) = c1et(1:nmo,1:nmo)
        endif
c
c.......diagonalize total 1st-order matrix
c
        call jacobi (c1et,nmo,nmo,d1mata,v1mata,nrot)
        if (allocated(c1et)) then
          deallocate(c1et,stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot deallocate c1et()'
        endif
c
        if (largwr.or.ok1rdm) then
          write (lw,*) '#'
          write (lw,*) '# First-order density matrix Eigenvalues'
          write (lw,444) (d1mata(i),i=1,nmo)
        endif
c
c.......Discard previously read in natural occupation numbers
c
        forall (i=1:nmo) occ(i) = d1mata(i)
        if (allocated(d1mata)) then
          deallocate(d1mata,stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot deallocate d1mata()'
        endif
        if (largwr) write (lw,*) '# Eigenvectors'
c              
c.......rotate into primitive basis, discarding previous naturals
c         
        do i=1,nmo
          if (largwr) write (lw,'(a,I3)') ' # Eigenvector ',i
          if (largwr) write (lw,444) (v1mata(j,i),j=1,nmo)
          do j=1,nprims
            tmp = 0d0
            do k=1,nmo
              tmp = tmp + v1mata(k,i) * coef(k+nmo,j)
            enddo
            coef(i,j) = tmp
          enddo
        enddo
        write (lw,*) '# Natural MOs in the WFN file have been replaced'
c
c.......Obtain group overlap integrals between natural MOs
c
        allocate (sgtmp(nmo,nmo))
        allocate (vtmp(nmo))
        sgnat=zero
        do igr=1,ngroup
          sgtmp=sg(igr,:,:)
          do k=1,nmo
            vtmp(:)=matmul(sgtmp,v1mata(:,k))
            do i=1,nmo
              sgnat(igr,i,k)=dot_product(v1mata(:,i),vtmp(:))
            enddo
          enddo
        enddo
        deallocate (sgtmp)
        deallocate (vtmp)
c
c-------Open systems analysis
c
        if (opensys) then
          call openrho (copen,aom,nfugrp,ifugrp,nprims,ncent,nmo,
     &     ngroup,lw,stderr,ifilc,udat,wfnfile,largwr)
           if (allocated(copen)) then
             deallocate (copen,stat=ier)
             if (ier.ne.0) stop 'edf.f: Cannot deallocate copen()'
           endif
        endif
      endif
c
c.....Analyze which of the canonical MOs may be considered as 
c     CORE MOs, and determine to which fragment they belong.
c
      if (.not.allocated(mocogrp)) then
        allocate (mocogrp(ngroup),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate mocogrp()'
      endif
      if (.not.allocated(icogrp)) then
        allocate (icogrp(ngroup,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate icogrp()'
      endif
      mocogrp = izero
      mocore  = izero
      if (corecan) then
        call coremos (sg,ngroup,nmo,ovcritcan,mocore,
     &  mocogrp,icore,moval,ival,stdout,ok,largeline)
c
c-------write NEW AOM and WFN with the core MOs elliminated
c
        if (ok) then
          ln=leng(largeline)
          largeline(1:4) = 'AOM '
          call suppress 
     &      (aom,udat,filedat,wfnfile,largeline(1:ln),stdout)
          largeline(1:4) = 'WFN '
          call suppress 
     &      (aom,udat,filedat,wfnfile,largeline(1:ln),stdout)
        else
          write (stdout,641)
        endif
      endif
c
c.....Modify the minimum and maximum values of ALPHA and BETA electrons 
c     taking into account possible existence of core orbitals.
c
      if (.not.(skipcan.and.skiploc.and.skiplocx)) write (stdout,504) 
      nfutgrp=0
      do i=1,ngroup
         eleca(2,i)=eleca(2,i)-mocore
         elecb(2,i)=elecb(2,i)-mocore
         if (.not.(skipcan.and.skiploc.and.skiplocx)) then
           write (stdout,500) i,nfugrp(i),(ifugrp(j,i),j=1,nfugrp(i))
           write (stdout,502) ' # ALPHA ',eleca(1,i),eleca(2,i)
           write (stdout,502) ' # BETA  ',elecb(1,i),elecb(2,i)
         endif
         nfutgrp=nfutgrp+nfugrp(i)
      enddo
      write (stdout,*) 
      if (nfutgrp.ne.ncent) then
        write (stderr,*)
        write (stderr,*) '# Basins not present in any group ?'
        write (stderr,*)
        stop
      endif

      naval = mal-mocore
      nbval = mbe-mocore
      nval  = nel-mocore-mocore

      if (nindep.and.ngroup.gt.2) then
        call configs (numdet,nmo,nelact,nact,ifilc,stderr,wfnfile)
        call indepgr (epsdet,probcut,numdet,nelact,nact,ncent,nmo,ncore,
     &  ngroup,mal,mbe,mocore,nel,moval,ifilc,stdout,stderr,aom,nfugrp,
     &  ifugrp,mocogrp,ival,orderp,short,wfnfile)
      endif
      if (bonding) then
        call configs (numdet,nmo,nelact,nact,ifilc,stderr,wfnfile)
        call optedf (epsdet,probcut,numdet,nelact,nact,ncent,nmo,ncore,
     &       ngroup,mal,mbe,mocore,nel,moval,ifilc,stdout,stdin,aom,sg,
     &       nfugrp,ifugrp,mocogrp,ival,short,wfnfile)
      endif
      if (maxwfn) then
        call configs (numdet,nmo,nelact,nact,ifilc,stderr,wfnfile)
        call wfnmax (stdin,stdout,stderr)
      endif
c
c.....Exact computation of probabilities.
c
      if (.not.skipcan) then
c
c.......Obtain the resonance structures
c
        call timer (2,ipid1,'_rnprobs  ',-1)
c
c.......Allocate the arrays resnca() and resncb() computing firt
c       the number of resonance structures.
c
        nproba=1
        nprobb=1
        mmm=1
        malco=mal-mocore
        mbeco=mbe-mocore
        do i=1,ngroup-1
          nproba=nproba*(malco+i)
          nprobb=nprobb*(mbeco+i)
          mmm=mmm*i
        enddo
        nproba=nproba/mmm
        nprobb=nprobb/mmm
        if (.not.allocated(resnca)) then
          allocate (resnca(nproba,ngroup),stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot allocate resnca()'
        endif
        if (.not.allocated(resncb)) then
          allocate (resncb(nprobb,ngroup),stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot allocate resncb()'
        endif
c
        call rnprobs (eleca,resnca,malco,ngroup,nproba,stdout)
        call rnprobs (elecb,resncb,mbeco,ngroup,nprobb,stdout)
        call timer (4,ipid1,'_rnprobs  ',-1)

        write (stdout,1130) randommin,randommax
        if (nalpha.eq.nbeta) then
          if (ngroup.eq.2.and.recur) then
            call rcalcedf  (epsdet,probcut,nproba,nprobb,nprob,ngroup,
     &        numdet,nmo,ncore,nelact,nact,nel,moval,ival,mocogrp,
     &        nval,naval,nbval,ifilc,stdout,stderr,wfnfile,sg,
     &        resnca,resncb,mulliken,largwr,orderp)
          else
            call binedf (randommin,randommax,
     &        epsdet,probcut,epsproba,nproba,nprobb,
     &        nprob,ngroup,numdet,nmo,ncore,nelact,nel,moval,ival,
     &        mocogrp,nval,naval,nbval,ifilc,stdout,stderr,wfnfile,sg,
     &        resnca,resncb,largwr,orderp,memedf)
          endif
        else
          call binedf (randommin,randommax,
     &      epsdet,probcut,epsproba,nproba,nprobb,
     &      nprob,ngroup,numdet,nmo,ncore,nelact,nel,moval,ival,
     &      mocogrp,nval,naval,nbval,ifilc,stdout,stderr,wfnfile,sg,
     &      resnca,resncb,largwr,orderp,memedf)
        endif
        if (allocated(resnca)) then
          deallocate (resnca,stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot deallocate resnca()'
        endif
        if (allocated(resncb)) then
          deallocate (resncb,stat=ier)
          if (ier.ne.0) stop 'edf.f: Cannot deallocate resncb()'
        endif
      endif
c
c.....Localization or delocalization is performed
c
      if (.not.allocated(oc)) then
        allocate (oc(nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate oc()'
      endif
      if (.not.allocated(sgloc)) then
        allocate (sgloc(ngroup,nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate sgloc()'
      endif
      if (.not.allocated(vrot)) then
        allocate (vrot(nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate vrot()'
      endif
      if (.not.allocated(canmo)) then
        allocate (canmo(nmo,nmo),stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot allocate canmo()'
      endif
c
c-----Localization of the Canonical MOs
c
      if (canloc.or.chemiloc.or.dafhloc.or.aomloc.or.otherdafh) then
        if (chemiloc.or.dafhloc.or.aomloc) allcloc=.true.
        if (allcloc) then
          if (.not.allocated(sgallc)) then
            allocate (sgallc(ncent,nmo,nmo),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate sgallc()'
          endif
          if (.not.allocated(cc)) then
            allocate (cc(nmo,nprims),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate cc()'
          endif
c
c---------Normalize MOs
c
          cc=coef(1+nmo:nmo+nmo,:)
          call normalizemos (cc,nmo,nprims)
c
c---------Multipole moments of canonical MOs are obtained.
c
          write (stdout,334) 'Canonical MOs'
          call newdrvmult (nmo,nprims,ncent,cc,stdout)
          sgallc(1:ncent,1:nmo,1:nmo)=aom(1:ncent,1:nmo,1:nmo)
          if (chemiloc) then
            call chemloc (sgallc,vrot,nmo,ncent,
     &           critov,damps,critics,covx,hesel,stdout,largwr,.true.)
            nloc=nmo
          elseif (aomloc) then
            call itaomloc (sgallc,vrot,nmo,ncent,mxcent,
     &                     critov,largwr,stdout)
              nloc=nmo
          elseif (dafhloc.or.otherdafh) then
c
c...........In case that the WFN is a multideterminantal one, we need to 
c           compute the DAFH in every atom by integrating rho^XC.
c           
cAQUI
C           if (mod(nel,2).eq.0) then
C             nelhalf=nel/2
C           else
C             nelhalf=(nel+1)/2
C           endif
            if (icorr.or.cciqa) then
              if (nalpha.eq.nbeta) then
                if (.not.allocated(dafh)) then
                  allocate (dafh(ncent,nmo,nmo),stat=ier)
                  if (ier.ne.0) stop 'edf.f: Cannot allocate dafh()'
                endif
                call compdafh (aom,dafh,nmo,ncent,stderr,wfnfile)
              else
                stop '# Unable DAHFLOC with multidet open shell WFNs'
              endif
              if (dafhloc) call itdafhc (sgallc,dafh,vrot,mxcent,
     &             covx,maxbond,nloc,nelhalf,udat,ifilc,wfnfile,
     &             critov,ixcent,largwr,warndafh,skiph,stdout)
              if (otherdafh) call dafhdo (sgallc,dafh,vrot,nloc,
     &            nelhalf,udat,ifilc,wfnfile,largwr,warndafh,lw)
            else
              if (dafhloc) call itdafh (sgallc,vrot,mxcent,covx,maxbond,
     &          udat,ifilc,wfnfile,critov,dafhselect,ndafhsel,idafhsel,
     &          ixcent,largwr,warndafh,skiph,stdout)
              if (otherdafh) call dafhdo (sgallc,sgallc,vrot,nloc,
     &            nelhalf,udat,ifilc,wfnfile,largwr,warndafh,lw)
              nloc=nmo
              if (warndafh) goto 3333
            endif
          else
            call canlmo (sgallc,vrot,nmo,ncent,critics,
     &            stdout,largwr,.true.)
          endif
c
c---------Test of the obtained AOM elements.
c
          call aomtest (sgallc(:,1:nloc,1:nloc),
     &         nloc,ncent,critics,stdout)
c
          do i=1,nloc
            do ip=1,nprims
              tmp=0d0
              do j=1,nmo
                tmp=tmp+coef(j+nmo,ip)*vrot(i,j)
              enddo
              cc(i,ip)=tmp
            enddo
          enddo
c
c---------AOM matrices are computed with the localized MOs
c
          coef(1:nloc,1:nprims)=cc(1:nloc,1:nprims)
          if (.not.(icorr.or.cciqa)) then
            if (mulliken) then
              call aomulliken (sgallc,1,.true.,stdout,wfnfile)
            elseif (mindef) then
              call aomindef (sgallc,1,.true.,stdout,wfnfile)
            elseif (mindefrho.or.netrho.or.promrho.or.hesel) then
              call aomindefrho (sgallc,alphahesel,betahesel,
     &         irho,nrad,nang,irmesh,rhopow,.true.,coef,stdout,wfnfile)
            elseif (lowdin) then
              call aomlowdin (sgallc,1,.true.,stdout,wfnfile)
            elseif (becke) then
              call aombecke (sgallc,nrad,nang,pow,irmesh,.true.,
     &        cc,stdout,wfnfile)
            endif
          endif
c
c---------Multipole moments of localized MOs are obtained.
c
          write (stdout,334) 'Localized MOs'
          call newdrvmult (nloc,nprims,ncent,cc(1:nloc,:),stdout)
          inmo=nloc+nloc
          inpr=nprims
          if (chemiloc) then
            wfnloc=wfnfile(1:leng(wfnfile))//"chem"
          elseif (aomloc) then
            wfnloc=wfnfile(1:leng(wfnfile))//"aom"
          elseif (dafhloc) then
            wfnloc=wfnfile(1:leng(wfnfile))//"dafh"
          else
            wfnloc=wfnfile(1:leng(wfnfile))//"loc"
          endif
          open (unit=udatnw,file=wfnloc,status='unknown')
          write (stdout,351) wfnloc(1:leng(wfnloc))
          if (icorr.or.cciqa) then
            call cdafhmos 
     &           (udat,udatnw,stderr,ifilc,cc(1:nloc,:),nloc,inpr)
          else
            call wrtwfn (udat,udatnw,stderr,ifilc,coef,inmo,inpr)
c
c-----------Fill in AOM file with localized MOs when dafhloc=.true.
c
            if (dafhloc.or.otherdafh) then
              lu19    =  19
              exfil   = .true.
              fileloc = trim(wfnloc)//'.aom'
              do while (exfil)
                inquire (unit=lu19,opened=exfil)
                if (.not.exfil) then
                  open (unit=lu19,file=trim(fileloc),iostat=ios)
                  if (ios.ne.0) then
                    write (0,*) 
     &              ' # edf.f: Error openning '//trim(fileloc)
                    stop
                  endif
                else
                  lu19=lu19+1
                endif
              enddo
              write (stdout,3511) trim(fileloc)
              do i=1,ncent
                write (lu19,'(I4,a)') i,' <--- AOMLOC in this center'
                write (lu19,80) ((sgallc(i,m,j),m=1,j),j=1,nmo)
              enddo
            endif
          endif
          close (udatnw)
c
 3333     continue
          if (allocated(sgallc)) then
            deallocate (sgallc,stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot deallocate sgallc()'
          endif
          if (allocated(cc)) then
            deallocate (cc,stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot deallocate cc()'
          endif
        else
          sgloc=zero
          do ngr=1,ngroup
            do i=1,nfugrp(ngr)
              sgloc(ngr,:,:) = sgloc(ngr,:,:) + aom(ifugrp(i,ngr),:,:)
            enddo
          enddo
          call canlmo 
     &         (sgloc,vrot,nmo,ngroup,critics,stdout,largwr,.true.)
        endif
      endif
c
      oc(1:nmo)=occ(1:nmo)
c
c.....If the isopycnic localization is performed on all the centers,
c     array sgallc() represents the AOM between localized MOs. Before
c     calling the localization routine (ruedmis), it is initialized to
c     the AOM between the natural MOs,
c
      if (localize) then
        if (allcloc) then
          if (.not.allocated(sgallc)) then
            allocate (sgallc(ncent,nmo,nmo),stat=ier)
            if (ier.ne.0) stop 'edf.f: Cannot allocate sgallc()'
          endif
          allocate (sgtmp(nmo,nmo))
          allocate (vtmp(nmo))
          sgallc=zero
          do igr=1,ncent
            sgtmp=aom(igr,:,:)
            do k=1,nmo
              vtmp(:)=matmul(sgtmp,v1mata(:,k))
              do i=1,nmo
                sgallc(igr,i,k)=dot_product(v1mata(:,i),vtmp(:))
              enddo
            enddo
          enddo
          deallocate (sgtmp)
          deallocate (vtmp)
C         sgallc=zero
C         do igr=1,ncent
C           do i=1,nmo
C             do k=1,nmo
C               tmpsg=zero
C               do m=1,nmo
C                 do j=1,nmo
C                   tmpsg=tmpsg+v1mata(m,i)*v1mata(j,k)*aom(igr,m,j)
C                 enddo
C               enddo
C               sgallc(igr,i,k)=tmpsg
C             enddo
C           enddo
C         enddo
        else
          sgloc(1:ngroup,1:nmo,1:nmo)=sgnat(1:ngroup,1:nmo,1:nmo)
        endif
      endif
c
      if (allocated(sgnat)) then
        deallocate (sgnat,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate sgnat()'
      endif
c
      if (localize) then
         if (.not.allocated(cc)) then
           allocate (cc(nmo+nmo,nprims),stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot allocate cc()'
         endif
         cc(nmo+1:nmo+nmo,1:nprims)=coef(nmo+1:nmo+nmo,1:nprims)
c
c--------Measuring the locality of Localized MOs. First, Normalize MOs
c
         call normalizemos (cc(1+nmo:nmo+nmo,:),nmo,nprims)
         write (stdout,334) 'Canonical MOs'
         call newdrvmult (nmo,nprims,ncent,cc(1+nmo:nmo+nmo,:),stdout)
c
c........Perform an isopycnic localization.
c
         if (allcloc) then    ! In all centers
            write (stdout,1121)
            vrot=0d0
            write (67,*) vrot
            call ruedmis (sgallc,vrot,oc,nmo,ncent,stdout,largwr,.true.)
c
c...........Obtain group overlap integrals sgloc() between localized MOs 
c           from sgallc(), the AOM between these orbitals
c
            sgloc=zero
            if (ngroup.eq.1) then
              forall (m=1:nmo) sgloc(1,m,m)=one
            else
              do k=1,ncent
                do ngr=1,ngroup
                  do i=1,nfugrp(ngr)
                    if (ifugrp(i,ngr).eq.k) then
                       sgloc(ngr,:,:)=sgloc(ngr,:,:)+sgallc(k,:,:)
                    endif
                  enddo
                enddo
              enddo
            endif
c
c-----------Fill in AOM file with localized MOs
c
            lu19    =  19
            exfil   = .true.
            fileloc = trim(wfnfile)//'loc.aom'
            do while (exfil)
              inquire (unit=lu19,opened=exfil)
              if (.not.exfil) then
                open (unit=lu19,file=trim(fileloc),iostat=ios)
                if (ios.ne.0) then
                  write (0,*) ' # edf.f: Error openning '//trim(fileloc)
                  stop
                endif
              else
                lu19=lu19+1
              endif
            enddo
            write (stdout,3510) trim(fileloc)
            do i=1,ncent
              write (lu19,'(I4,a)') i,' <--- AOMLOC within this center'
              write (lu19,80) ((sgallc(i,m,j),m=1,j),j=1,nmo)
            enddo
c
c...........Deallocate sgallc().
c
            if (allocated(sgallc)) then
              deallocate (sgallc,stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot deallocate sgallc()'
            endif
         else                      ! In all groups
            write (stdout,112)
            call ruedmis (sgloc,vrot,oc,nmo,ngroup,stdout,largwr,.true.)
         endif
c
c........Expand the localized MOs (LMO) in terms of primitive Gaussians 
c        and obtain the transformation matrix from canonical (CANMO) to 
c        LMOs, stored in canmo().
c        
CCC      if (.not.allocated(cc)) then
CCC        allocate (cc(nmo+nmo,nprims),stat=ier)
CCC        if (ier.ne.0) stop 'edf.f: Cannot allocate cc()'
CCC      endif
         cc(nmo+1:nmo+nmo,1:nprims)=coef(nmo+1:nmo+nmo,1:nprims)
         do i=1,nmo
           do j=1,nmo
             temp=zero
             do k=1,nmo
               temp=temp+v1mata(j,k)*vrot(i,k)
             enddo
             canmo(j,i)=temp
           enddo
           do j=1,nprims
             temp = 0d0
             do k=1,nmo
               temp = temp + canmo(k,i) * coef(k+nmo,j)
             enddo
             cc(i,j) = temp
           enddo
         enddo
c
c--------Measuring the locality of Localized MOs. First, Normalize MOs
c
         call normalizemos (cc(1:nmo,:),nmo,nprims)
         write (stdout,334) 'Localized MOs'
         call newdrvmult (nmo,nprims,ncent,cc(1:nmo,:),stdout)
c
c........Obtain the transformation matrix from LMOs to CANMOs, 
c        i.e. the inverse of canmo(k,i).
c
         if (.not.allocated(work)) then
           allocate (work(nmo),stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot allocate work()'
         endif
         if (.not.allocated(ipvt)) then
           allocate (ipvt(nmo),stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot allocate ipvt()'
         endif
c
         call dgeco (canmo,nmo,nmo,ipvt,rcond,work)
         job=01
         deter=zero
         call dgedi (canmo,nmo,nmo,ipvt,deter,work,job)
c
         if (allocated(work)) then
           deallocate (work,stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot deallocate work()'
         endif
c
         if (allocated(ipvt)) then
           deallocate (ipvt,stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot deallocate ipvt()'
         endif
c
         if (largwr) then
           write (stdout,41)
           do m=1,nmo
             write (stdout,331) m
             write (stdout,30) (canmo(j,m),j=1,nmo)
           enddo
         endif
c
c........lmowfn.f routine requires the transpose of canmo().
c
         do i=2,nmo
           do j=1,i-1
             temp=canmo(i,j)
             canmo(i,j)=canmo(j,i)
             canmo(j,i)=temp
           enddo
         enddo
c
c........Write a WFN file changing the input natural MOs by the recently
c        computed localized MOs.
c
         inmo=nmo+nmo
         inpr=nprims
         occ(1:nmo)=oc(1:nmo)
         wfnloc=wfnfile(1:leng(wfnfile))//"loc"
         open (unit=udatnw,file=wfnloc,status='unknown')
         write (stdout,351) wfnloc(1:leng(wfnloc))
         call wrtwfn (udat,udatnw,stderr,ifilc,cc,inmo,inpr)
         if (allocated(cc)) then
           deallocate (cc,stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot deallocate cc()'
         endif
         close (udatnw)
         write (stdout,'(1x,a)') '# Done'
c
         if ((.not.skiploc).or.(.not.skiplocx)) then
           if (.not.allocated(ivaloc)) then
             allocate (ivaloc(nmo),stat=ier)
             if (ier.ne.0) stop 'edf.f: Cannot allocate ivaloc()'
           endif
c
c..........Analyze which of the localized MOs may be considered as CORE
c          MOs, and determine to which fragment they belong.
c
           mocogrp=izero
           if (coreloc) then
             do i=1,ngroup
               eleca(2,i)=eleca(2,i)+mocore
               elecb(2,i)=elecb(2,i)+mocore
             enddo
             mocore=izero
             do ig=1,ngroup
               do i=1,nmo
                 if (sgloc(ig,i,i).gt.ovcritloc) then
                   mocore=mocore+1
                   mocogrp(ig)=mocogrp(ig)+1
                   icore(mocore)=i
                   icogrp(ig,mocogrp(ig))=i
                 endif
               enddo
             enddo
             movaloc=izero
             do i=1,nmo
               j=1
               iscore=.false.
               do while (j.le.mocore.and.(.not.iscore))
                 if (i.eq.icore(j)) iscore=.true.
                 j=j+1
               enddo
               if (.not.iscore) then
                 movaloc=movaloc+1
                 ivaloc(movaloc)=i
               endif
             enddo
             write (stdout,221) ovcritloc
             do ig=1,ngroup
               mocg=mocogrp(ig)
               write (stdout,222) ig,mocg,(icogrp(ig,k),k=1,mocg)
               do k=1,mocg
                 write (stdout,225) icogrp(ig,k),icogrp(ig,k),ig,
     &           sgloc(ig,icogrp(ig,k),icogrp(ig,k))
               enddo
             enddo
c
             nval=nel-2*mocore
             naval=mal-mocore
             nbval=mbe-mocore
c
             do i=1,ngroup
               eleca(2,i)=eleca(2,i)-mocore
               elecb(2,i)=elecb(2,i)-mocore
             enddo
c
             call timer (2,ipid1,'_rnprobs  ',-1)
c
c............Allocate the arrays resnca() and resncb() computing firt
c            the number of resonance structures.
c
             nproba=1
             nprobb=1
             mmm=1
             do i=1,ngroup-1
               nproba=nproba*(naval+i)
               nprobb=nprobb*(nbval+i)
               mmm=mmm*i
             enddo
             nproba=nproba/mmm
             nprobb=nprobb/mmm
             if (.not.allocated(resnca)) then
               allocate (resnca(nproba,ngroup),stat=ier)
               if (ier.ne.0) stop 'edf.f: Cannot allocate resnca()'
             endif
             if (.not.allocated(resncb)) then
               allocate (resncb(nprobb,ngroup),stat=ier)
               if (ier.ne.0) stop 'edf.f: Cannot allocate resncb()'
             endif
c
             call rnprobs (eleca,resnca,naval,ngroup,nproba,stdout)
             call rnprobs (elecb,resncb,nbval,ngroup,nprobb,stdout)
             call timer (4,ipid1,'_rnprobs  ',-1)
           else
             mocore=izero
             movaloc=nmo
             nval=nel
             naval=mal
             nbval=mbe
             forall (i=1:movaloc) ivaloc(i)=i
             do i=1,ngroup
               eleca(2,i)=eleca(2,i)+mocore
               elecb(2,i)=elecb(2,i)+mocore
             enddo
             call timer (2,ipid1,'_rnprobs  ',-1)
c
c............Allocate the arrays resnca() and resncb() computing firt
c            the number of resonance structures.
c
             nproba=1
             nprobb=1
             mmm=1
             do i=1,ngroup-1
               nproba=nproba*(naval+i)
               nprobb=nprobb*(nbval+i)
               mmm=mmm*i
             enddo
             nproba=nproba/mmm
             nprobb=nprobb/mmm
             if (.not.allocated(resnca)) then
               allocate (resnca(nproba,ngroup),stat=ier)
               if (ier.ne.0) stop 'edf.f: Cannot allocate resnca()'
             endif
             if (.not.allocated(resncb)) then
               allocate (resncb(nprobb,ngroup),stat=ier)
               if (ier.ne.0) stop 'edf.f: Cannot allocate resncb()'
             endif
c
             call rnprobs (eleca,resnca,naval,ngroup,nproba,stdout)
             call rnprobs (elecb,resncb,nbval,ngroup,nprobb,stdout)
             call timer (4,ipid1,'_rnprobs  ',-1)
           endif
c
c..........Find expansion coefficients of the wave function in terms
c          of Slater dets built in with localized MOs.
c
           call lmowfn (canmo,epswfnloc,numdet,nmo,ncore,nelact,
     &        nel,mal,mbe,ndetlmo,largwr,wfnfile,cicoef,ifilc,ifilmo,
     &        stdout,stderr)
         endif
c
c........Exact calculation of probabilities with Localized MOs
c
         if (.not.skiploc) then
           write (stdout,1131) randommin,randommax
           if (numdet.eq.1) then
             call nbasab (probcut,nproba,nprobb,nprob,ngroup,nmo,
     &         movaloc,ivaloc,mocogrp,nel,nval,naval,nbval,ifilc,
     &         stdout,sgloc,resnca,resncb,largwr,orderp)
           else
             call binedf (randommin,randommax,
     &         epsdet,probcut,epsproba,nproba,nprobb,
     &         nprob,ngroup,ndetlmo,nmo,0,nel,nel,movaloc,ivaloc,
     &         mocogrp,nval,naval,nbval,ifilmo,stdout,stderr,
     &         wfnfile,sgloc,resnca,resncb,largwr,orderp,memedf)
           endif
         endif       
c
c........Approximate calculation of probabilities with Localized MOs
c
         if (.not.skiplocx) then
            if (.not.allocated(resnca)) then
              allocate (resnca(nproba,ngroup),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate resnca()'
            endif
            if (.not.allocated(resncb)) then
              allocate (resncb(nprobb,ngroup),stat=ier)
              if (ier.ne.0) stop 'edf.f: Cannot allocate resncb()'
            endif
           if (.not.icorr) then
             call xnbasab (probcut,nproba,nprobb,nprob,ngroup,nmo,
     &            movaloc,ivaloc,mocogrp,nel,nval,naval,nbval,ifilc,
     &            stdout,sgloc,resnca,resncb,largwr,orderp)
           else
             if (nalpha.eq.nbeta) then
               call xcalcedf  (epsdet,probcut,nproba,nprobb,nprob,
     &              ngroup,ndetlmo,wfnfile,nmo,0,nel,nel,
     &              movaloc,ivaloc,mocogrp,naval,ifilmo,stdout,
     &              stderr,sgloc,resnca,resncb,largwr,orderp)
             else
               call xcalcedfd (epsdet,probcut,nproba,nprobb,nprob,
     &              ngroup,ndetlmo,wfnfile,nmo,0,nel,nel,
     &              movaloc,ivaloc,mocogrp,naval,nbval,ifilmo,stdout,
     &              stderr,sgloc,resnca,resncb,largwr,orderp)
             endif
           endif
         endif
c
         if (allocated(ivaloc)) then
           deallocate (ivaloc,stat=ier)
           if (ier.ne.0) then
             stop 'edf.f: Cannot deallocate ivaloc()'
           endif
         endif
         if (allocated(resnca)) then
           deallocate (resnca,stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot deallocate resnca()'
         endif
         if (allocated(resncb)) then
           deallocate (resncb,stat=ier)
           if (ier.ne.0) stop 'edf.f: Cannot deallocate resncb()'
         endif
      endif
c
c-----Probabilities for specific resonance structures.
c
      if (nrsrs.gt.0) then
        call configs (numdet,nmo,nelact,nact,ifilc,stderr,wfnfile)
        do i=1,nrsrs
          call prsrs (sg,epsdet,numdet,ok,ngroup,nalpha,nbeta,nmo,
     &                ncore,nel,stdout,stderr,maxpopul,minpopul,
     &                probal,nres(i))
          if (ok) write (stdout,116) probal,nres(i)(1:leng(nres(i)))
        enddo
      endif
c
c.....All two-center DIs are computed.
c
      if (ditwocent) then
        call configs (numdet,nmo,nelact,nact,ifilc,stderr,wfnfile)
        call twocendi (aom,epsbond,epsdet,probcut,numdet,ncent,nmo,
     &   nel,nval,ncore,nelact,moval,mal,mbe,ifilc,stdout,stderr,ngroup,
     &   ival,wfnfile,largwr)
      endif
c
      if (allocated(sg)) then
        deallocate (sg,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate sg()'
      endif
c
      if (allocated(ival)) then
        deallocate (ival,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate ival()'
      endif
      if (allocated(nfugrp)) then
        deallocate (nfugrp,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate nfugrp()'
      endif
      if (allocated(ifugrp)) then
        deallocate (ifugrp,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate ifugrp()'
      endif
c
      if (allocated(icogrp)) then
        deallocate (icogrp,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate icogrp()'
      endif
c
      if (allocated(mocogrp)) then
        deallocate (mocogrp,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate mocogrp()'
      endif
c
      if (allocated(icore)) then
        deallocate (icore,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate icore()'
      endif
c
      if (allocated(canmo)) then
        deallocate(canmo,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate canmo()'
      endif
c
      if (allocated(v1mata)) then
        deallocate(v1mata,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate v1mata()'
      endif
c
      if (allocated(eleca)) then
        deallocate(eleca,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate eleca()'
      endif
c
      if (allocated(elecb)) then
        deallocate(elecb,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate elecb()'
      endif
c
      if (allocated(sgloc)) then
        deallocate (sgloc,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate sgloc()'
      endif
c
      if (allocated(vrot)) then
        deallocate (vrot,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate vrot()'
      endif
c
      if (allocated(isup)) then
        deallocate (isup,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate isup()'
      endif
c
      if (allocated(isupx)) then
        deallocate (isupx,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate isupx()'
      endif
c
      if (allocated(ordsup)) then
        deallocate (ordsup,stat=ier)
        if (ier.ne.0) stop 'edf.f: Cannot deallocate ordsup()'
      endif

*     call deallocate_space_for_wfncoef
*     call deallocate_space_for_cidet 
*     call deallocate_space_for_wfnbasis
      close (ifilc,status='delete')
      close (ifilmo,status='delete')
*     open  (luc0,file='C0coef')
*     close (luc0,status='delete')
c
      call timer (5,ipid,'_edf      ',stdout)
*     call getdate (line)
      call timestamp (line)
      write (stdout,2000) line(1:leng(line))
      write (stderr,'(a)') 
     & " # End of Run Ok for WFN file "//trim(wfnfile)
c
c.....Formats
c
 1000 format(1x,'# -------------------- EDF ------------------------',
     & /,' # |     ELECTRON NUMBER DISTRIBUTION FUNCTIONS    |',/,
     &   ' # |   (c) E. Francisco & A. Martín Pendas, 2016   |',/,
     &   ' # |           University of Oviedo                |',/,
     &   ' # -------------------------------------------------',/,
     &   ' # Calculation starts on ',a)
 2000 format (' # Calculation ends on ',a)
 321  format (' # edf.f: Bad format in record #1 of input file',/,
     .        ' # edf.f: IOVERLAP variable not read in')
 33   format (1x,'# AOM file                          = ',a)
 34   format (1x,'# Wave Function file                = ',a)
 36   format (1x,'# Number of determinants in WFN     = ',I10)
 363  format (1x,'# Type of single-determinant WFN    = ',7x,a)
 361  format (1x,'# Number of determinants in WFN     = ',I10,/,
     &        1x,'# Number of active electrons in WFN = ',I10,/,
     &        1x,'# Number of core orbitals in WFN    = ',I10,/,
     &        1x,'# Number of active orbitals in WFN  = ',I10)
 37   format (1x,'# EPSDET                            = ',E18.10,/,
     &        1x,'# EPSWFN                            = ',E18.10,/,
     &        1x,'# EPSWFNLOC                         = ',E18.10,/,
     &        1x,'# PROBCUT                           = ',E18.10,/,
     &        1x,'# EPSPRBA                           = ',E18.10)
 55   format (1x,'# AOM read in with ',a,' format')
 56   format (1x,'# Analysis ',a,' including SPIN probabilities')
 57   format (1x,'# Complex Atomic Overlap Matrix is read in')
 58   format (1x,'# Complex Group Overlap integrals are computed')
 103  format (1x,A4,4x,I3,3(2x,F15.8),4X,F5.1)
 80   format (6(1x,e16.10))
 1700 format (8f10.6)
 1701 format (6(1x,f13.10))
 500  format (' # FRAGMENT ',I2,' FORMED BY ',I3,' BASINS:',
     & 15I4,/,1000(' # ',33x,15I4,/))
 501  format (1x,69('-'))
 502  format (a,'(MinElec,MaxElec)',14x,':',2(1x,I4),
     &        ' (CORE ELECTRONS EXCLUDED)')
 504  format (1x,'#',/,1x,
     &  '# MAXIMUM AND MINIMUM ELECTRON POPULATIONS OF FRAGMENTS')
 503  format (1x,'Cartesian coordinates (bohr) and nuclear charges')
 26   format (//,' NEW ',a,' VALUE = ',E12.6)
 28   format (//,' # NUMBER OF DETERMINANTS ACTUALLY USED : ',I6)
 29   format (//,' # THERE ARE ',I3,' CORE    ORBITALS :',200I3)
 31   format (   ' # THERE ARE ',I3,' VALENCE ORBITALS :',200I3)
 432  format (1x,'# Atom number ',I3,' of group ',I2,
     &        1x,'is equal to atom number ',I3,' of group ',I2)
 15   format (/1x,'# Atomic overlap matrix not read for atom ',I3,/)
 16   format (1x,'# Reading AOM for atom ',I3)
 17   format (1x,'# Fatal error reading aom() array:',/,
     &        1x,'# Trying to read aom() for atom ',I3,
     &        ', and there are only ',I3,' atoms')
 21   format (1x,'# Number of electrons               = ',I10,/,
     &        1x,'# Number of molecular orbitals      = ',I10)
 111  format (1x,'# Number of probabilities to be computed = ',I6)
 112  format (1x,'#',/,1x,'# ',80('+'),/,
     &        1x,'# ISOPYCNIC LOCALIZATION ROUTINE (GROUPS)',/,1x,'#')
 1121 format (1x,'#',/,1x,'# ',80('+'),/,
     &        1x,'# ISOPYCNIC LOCALIZATION ROUTINE (CENTERS)',/,1x,'#')
 1120 format (1x,'#',/,1x,'# ',80('+'),/,
     &        1x,'# DELOCALIZATION ROUTINE',/,1x,'#')
 444  format (6(2x,F12.6))
 40   format (1x,'#',/,1x,'#',80('+'),/,
     &        1x,'# INVERSE OF THE TRANSPOSE OF THE ROTATION MATRIX',
     &        1x,'FROM NATURAL TO LOCALIZED MOs')
 41   format (//' # ROTATION MATRIX (U) FROM LOCALIZED MOs TO',
     &        ' CANONICAL MOs',/,' # canMO_i =  SUM_j locMO_j U_ji')
 30   format (10(1x,F12.6))
 331  format (' # Canonical MO number ',I3)
 3510 format (1x,"#",/,1x,"# Writing file ","'",a,"' with",
     & " AOMs over Localized MOs")
 3511 format (1x,"#",/,1x,"# Writing file ","'",a,"' with",
     & " AOMs over DAFH Localized MOs")
 351  format (1x,"#",/,1x,"# Writing file ","'",a,"' with",
     & " Localized MOs instead of Natural MOs")
 335  format (1x,'# AOM is renormalized, the reference atom is ',I5)
 221  format (1x,'#',/,1x,'# Automatic analysis of Localized CORE MOs',
     &      /,1x,'# Overlap criterium of Localization = ',F16.10)
 223  format (1x,'#',/,
     & 1x,'#',/,1x,'# Automatic analysis of CORE MOs',
     &      /,1x,'# Overlap criterium of Localization = ',F16.10)
 222    format (1x,'# FRAGMENT ',I3,' has ',I3,
     &             ' Localized CORE MOs: ',40I3)
 225    format (1x,'# <LOC_',I3,'|LOC_',I3,'>_',I2,' = ',F16.10)
 226    format (1x,'# <MO_',I3,'|MO_',I3,'>_',I2,' = ',F16.10)
 224    format (1x,'# FRAGMENT ',I3,' HAS ',I3,
     &             ' MOs COMPLETELY LOCALIZED ON IT: ',/,
     &             100(1x,'# ---> ',20I3,/))
 1130 format (3(1x,'#',/),1x,'# ',80('+'),/,1x,
     & '# EXACT CALCULATION OF PROBABILITIES WITH CANONICAL MOs',/,
     & ' # (MinRandom,MaxRandom) = ',2(1x,F12.5),/,1x,'#')
 1131 format (3(1x,'#',/),1x,'# ',80('+'),/,1x,
     & '# EXACT CALCULATION OF PROBABILITIES WITH LOCALIZED MOs',/,1x,
     & '# LOCALIZED MOs ARE NOT ORTHOGONAL ==> SUM_i PROB_i .NE. 1',/,
     & ' # (MinRandom,MaxRandom) = ',2(1x,F12.5),/,1x,'#')
 87   format (1x,
     & '# Cutting the WaveFunction expansion in terms of Slater dets',/,
     & 1x,'# Coefficients smaller than ',E16.10,' are neglected',/,
     & 1x,'# Number of Slater determinants before cutting = ',I6,/,
     & 1x,'# Number of Slater determinants after  cutting = ',I6)
 642  format (1x,'# Isopycnic Localization of CORE MOs: ')
 975  format (' # Number of Resonance Structures for ALPHA e = ',I10,/,
     &        ' # Number of Resonance Structures for BETA  e = ',I10)
 22   format (' # Probability = ',F12.6,4x,'for RSRS ',20I4)
 23   format (' # Approximate EDF assuming that electron populations')
 231  format (' # of groups 1...NGROUP-1 are not coupled')
 232  format (' # GROUP ',I3,'  with atoms ',100I4)   
 116  format (1x,'# PROB = ',f16.10,2x,'for ',a,
     & ' SPINLESS RESONANT STRUCTURE')
 544  format (' # !! AOM is not Ok !! : SUM_n AOM(n,',2I3,') = ',E15.8)
 546  format (' # !! AOM is     Ok !! : SUM_n AOM(n,',2I3,') = ',E15.8)
 545  format (' # !! SUM_n AOM(n,',2I3,') = ',E15.8)
 334  format (/,' # Second & fourth moment orbital spread of ',a)
 10   format (' # MOs are orthogonalized using the OFMO method')
 100  format (' # edf.f: File ',a,' NOT FOUND')
 1123 format (' # NMOPAIR in file ',a,'(',I4,') # ',I4,'=Current value')
 641  format (
     & " # AOM file with core MOs suppresed is not written",/,
     & " # WFN file with core MOs suppresed is not written",/,
     & " # To write these files, increase the value of MMLINE ",/,
     & " # in the main program 'edf.f' and in the routine 'coremos.f'")
      end
